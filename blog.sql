/*
 Navicat MySQL Data Transfer

 Source Server         : lbmblog
 Source Server Type    : MySQL
 Source Server Version : 80027
 Source Host           : 192.168.3.147:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 80027
 File Encoding         : 65001

 Date: 31/12/2021 16:43:10
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for about
-- ----------------------------
DROP TABLE IF EXISTS `about`;
CREATE TABLE `about`  (
  `id` bigint NOT NULL,
  `name_en` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `name_zh` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of about
-- ----------------------------
INSERT INTO `about` VALUES (1, 'title', '标题', '关于帅气的 Naccl');
INSERT INTO `about` VALUES (2, 'musicId', '网易云歌曲ID', '423015580');
INSERT INTO `about` VALUES (3, 'content', '正文Markdown', '');
INSERT INTO `about` VALUES (4, 'commentEnabled', '评论开关', 'true');

-- ----------------------------
-- Table structure for blog_tag
-- ----------------------------
DROP TABLE IF EXISTS `blog_tag`;
CREATE TABLE `blog_tag`  (
  `blog_id` bigint NOT NULL,
  `tag_id` bigint NOT NULL
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of blog_tag
-- ----------------------------

-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `category_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of category
-- ----------------------------

-- ----------------------------
-- Table structure for ms_admin
-- ----------------------------
DROP TABLE IF EXISTS `ms_admin`;
CREATE TABLE `ms_admin`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of ms_admin
-- ----------------------------
INSERT INTO `ms_admin` VALUES (1, 'admin', '$2a$10$RZECQ90DjOT/t1mhnXsl5.XSuZWc0Sa1XduPxj2rb4yaSYcje3nWW');
INSERT INTO `ms_admin` VALUES (2, 'mszlu', '$2a$10$RZECQ90DjOT/t1mhnXsl5.XSuZWc0Sa1XduPxj2rb4yaSYcje3nWW');

-- ----------------------------
-- Table structure for ms_admin_permission
-- ----------------------------
DROP TABLE IF EXISTS `ms_admin_permission`;
CREATE TABLE `ms_admin_permission`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `admin_id` bigint NOT NULL,
  `permission_id` bigint NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of ms_admin_permission
-- ----------------------------
INSERT INTO `ms_admin_permission` VALUES (1, 1, 1);
INSERT INTO `ms_admin_permission` VALUES (2, 2, 1);

-- ----------------------------
-- Table structure for ms_article
-- ----------------------------
DROP TABLE IF EXISTS `ms_article`;
CREATE TABLE `ms_article`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `comment_counts` int NULL DEFAULT NULL COMMENT '评论数量',
  `create_date` bigint NULL DEFAULT NULL COMMENT '创建时间',
  `summary` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '简介',
  `title` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '标题',
  `view_counts` int NULL DEFAULT NULL COMMENT '浏览数量',
  `weight` int NOT NULL COMMENT '是否置顶',
  `author_id` bigint NULL DEFAULT NULL COMMENT '作者id',
  `body_id` bigint NULL DEFAULT NULL COMMENT '内容id',
  `category_id` int NULL DEFAULT NULL COMMENT '类别id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1474394942186532865 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of ms_article
-- ----------------------------
INSERT INTO `ms_article` VALUES (1, 20, 1602132131231, '通过Spring Boot实现的服务，只需要依靠一个Java类，把它打包成jar，并通过`java -jar`命令就可以运行起来。\r\n\r\n这一切相较于传统Spring应用来说，已经变得非常的轻便、简单。', 'springboot介绍以及入门案例', 197, 0, 1, 1, 2);
INSERT INTO `ms_article` VALUES (9, 0, 1632132131231, 'Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。', 'Vue.js 到底是什么', 32, 0, 1, 20, 2);
INSERT INTO `ms_article` VALUES (10, 0, 1532132131231, '本节将介绍如何在项目中使用 Element。', 'Element相关', 11, 0, 1, 21, 2);
INSERT INTO `ms_article` VALUES (1405916999732707330, 0, 1232132131231, 'springboot入门案例', 'SpringBoot入门案例', 6, 0, 1, 1405916999854342146, 2);
INSERT INTO `ms_article` VALUES (1468182881431461889, 0, 1638877051112, '魔刀千刃简介', '魔刀千刃', 26, 0, 1, 1468182881431461890, 4);
INSERT INTO `ms_article` VALUES (1471856156936065026, 0, 1639752828248, '调错日记，关于maven依赖注入时的版本问题', '【调错日记】fastjson:not found', 25, 0, 1, 1471856156936065027, 2);
INSERT INTO `ms_article` VALUES (1472928309869883394, 0, 1640008449582, 'docker部署前后端分离项目', 'Docker部署Springboot+vue前后端分离项目', 21, 0, 1, 1472928310499028994, 2);
INSERT INTO `ms_article` VALUES (1472932224111816706, 0, 1640009382659, '调错日记', '【调错日记】容器时间与宿主机系统时间不符导致数据库链接失败', 43, 0, 1, 1472932224141176834, 2);
INSERT INTO `ms_article` VALUES (1474394237451186177, 0, 1640357953894, '结构化面试', '社会现象题答题模板', 1, 0, 1, 1474394237883199489, 2);
INSERT INTO `ms_article` VALUES (1474394448995102722, 0, 1640358004224, '结构化面试', '【结构化面试】人际关系', 4, 0, 1, 1474394449003491329, 2);
INSERT INTO `ms_article` VALUES (1474394705053167618, 0, 1640358065274, '结构化面试', '【结构化面试】组织管理题', 6, 0, 1, 1474394705061556225, 1);
INSERT INTO `ms_article` VALUES (1474394942186532865, 0, 1640358121810, '结构化面试', '【结构化面试】综合分析题答题思路', 8, 0, 1, 1474394942190727170, 1);

-- ----------------------------
-- Table structure for ms_article_body
-- ----------------------------
DROP TABLE IF EXISTS `ms_article_body`;
CREATE TABLE `ms_article_body`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `content_html` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `article_id` bigint NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `article_id`(`article_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1474394942190727170 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of ms_article_body
-- ----------------------------
INSERT INTO `ms_article_body` VALUES (1, '# 1. Spring Boot介绍\r\n\r\n## 1.1 简介\r\n\r\n在您第1次接触和学习Spring框架的时候，是否因为其繁杂的配置而退却了？\r\n\r\n在你第n次使用Spring框架的时候，是否觉得一堆反复黏贴的配置有一些厌烦？\r\n\r\n那么您就不妨来试试使用Spring Boot来让你更易上手，更简单快捷地构建Spring应用！\r\n\r\nSpring Boot让我们的Spring应用变的更轻量化。\r\n\r\n我们不必像以前那样繁琐的构建项目、打包应用、部署到Tomcat等应用服务器中来运行我们的业务服务。\r\n\r\n通过Spring Boot实现的服务，只需要依靠一个Java类，把它打包成jar，并通过`java -jar`命令就可以运行起来。\r\n\r\n这一切相较于传统Spring应用来说，已经变得非常的轻便、简单。\r\n\r\n**总结一下Spring Boot的主要优点：**\r\n\r\n1. 为所有Spring开发者更快的入门\r\n2. 开箱即用，提供各种默认配置来简化项目配置\r\n3. 内嵌式容器简化Web项目\r\n4. 没有冗余代码生成和XML配置的要求\r\n5. 统一的依赖管理\r\n6. 自动装配，更易使用，更易扩展\r\n\r\n## 1.2 使用版本说明\r\n\r\nSpringboot版本：使用最新的2.5.0版本\r\n\r\n教程参考了官方文档进行制作，权威。\r\n\r\n其他依赖版本：\r\n\r\n	1. Maven  需求：3.5+\r\n\r\n   	2. JDK 需求  8+\r\n   	3. Spring Framework 5.3.7以上版本\r\n   	4. Tomcat 9.0\r\n   	5. Servlet版本 4.0  但是可以部署到Servlet到3.1+的容器中\r\n\r\n# 2. 快速入门\r\n\r\n快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。\r\n\r\n教程使用的Idea版本：2019.3\r\n\r\n## 2.1 创建基础项目\r\n\r\n**第一步：** 创建maven项目\r\n\r\npom.xml :\r\n\r\n~~~xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.xiaopizhu</groupId>\r\n    <artifactId>helloSpringBoot</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n	<!--springboot的父工程其中定义了常用的依赖，并且无依赖冲突-->\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.5.0</version>\r\n    </parent>\r\n</project>\r\n~~~\r\n\r\n注意上方的parent必须加，其中定义了springboot官方支持的n多依赖，基本上常用的已经有了，所以接下来导入依赖的时候，绝大部分都可以不加版本号。\r\n\r\n此时的工程结构为：\r\n\r\n![image-20210523173241557](img/image-20210523173241557.png)\r\n\r\n**第二步：** 添加web依赖\r\n\r\n~~~xml\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-web</artifactId>\r\n    </dependency>\r\n</dependencies>\r\n~~~\r\n\r\n添加上方的web依赖，其中间接依赖了spring-web，spring-webmvc，spring-core等spring和springmvc的包，并且集成了tomcat。\r\n\r\n**第三步：** 编写启动类\r\n\r\n~~~java\r\npackage com.xiaopizhu.springboot;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class HelloApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(HelloApp.class,args);\r\n    }\r\n}\r\n\r\n~~~\r\n\r\n@SpringBootApplication注解标识了HelloApp为启动类，也是Spring Boot的核心。\r\n\r\n**第四步：** 运行启动类的main方法\r\n\r\n![image-20210523173712142](img/image-20210523173712142.png)\r\n\r\n看到如上配置，证明启动成功，tomcat端口号默认为8080。\r\n\r\n**第五步：**  如果想要修改端口号，可以在resources目录下新建application.properties\r\n\r\n~~~properties\r\nserver.port=8082\r\n~~~\r\n\r\n**第六步：** 重新运行\r\n\r\n![image-20210523174011613](img/image-20210523174011613.png)\r\n\r\n此时的项目结构为：\r\n\r\n![image-20210523174032053](img/image-20210523174032053.png)\r\n\r\n**src/main/java :**  编写java代码，注意启动类需要放在项目的根包下。\r\n\r\n**src/main/resources:**  放置资源的目录，比如springboot的配置文件，静态文件，mybatis配置，日志配置等。\r\n\r\n**src/test/java:**  测试代码\r\n\r\n## 2.2 编写一个Http接口\r\n\r\n**第一步：**创建`HelloController`类，内容如下：\r\n\r\n~~~java\r\npackage com.xiaopizhu.springboot.controller;\r\n\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController\r\n@RequestMapping(\"hello\")\r\npublic class HelloController {\r\n\r\n    @GetMapping(\"boot\")\r\n    public String hello(){\r\n        return \"hello spring boot\";\r\n    }\r\n\r\n}\r\n\r\n~~~\r\n\r\n**注意包名，必须在启动类所在的包名下。**\r\n\r\n**第二步：**重启程序，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot\r\n\r\n得到结果：hello spring boot\r\n\r\n## 2.3 编写单元测试用例\r\n\r\n**第一步：**添加spring boot测试依赖\r\n\r\n~~~xml\r\n		<dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n~~~\r\n\r\n**第二步：**在src/test 下，编写测试用例\r\n\r\n~~~java\r\npackage com.xiaopizhu.springboot.controller;\r\n\r\nimport org.junit.jupiter.api.BeforeAll;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\r\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\r\n\r\nimport static org.hamcrest.Matchers.equalTo;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n\r\n@SpringBootTest\r\npublic class TestHelloController {\r\n\r\n    private MockMvc mockMvc;\r\n\r\n    @BeforeEach\r\n    public void beforeEach(){\r\n        mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()).build();\r\n    }\r\n    @Test\r\n    public void testHello() throws Exception {\r\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/hello/boot\")\r\n                .accept(MediaType.APPLICATION_JSON))\r\n                .andExpect(status().isOk())\r\n                .andExpect(content().string(equalTo(\"hello spring boot\")));\r\n    }\r\n}\r\n\r\n~~~\r\n\r\n上面的测试用例，是构建一个空的`WebApplicationContext`，并且在before中加载了HelloController，得以在测试用例中mock调用，模拟请求。\r\n\r\n## 2.4 打包为jar运行\r\n\r\n**第一步：**添加打包(maven构建springboot)插件\r\n\r\n~~~xml\r\n  <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n~~~\r\n\r\n在idea的右侧 maven中，使用package来打包程序，打包完成后，在target目录下生成helloSpringBoot-1.0-SNAPSHOT.jar\r\n\r\n![image-20210523181737720](img/image-20210523181737720.png)\r\n\r\n**第二步：**打开cmd：找到jar对应的目录\r\n\r\n输入命令\r\n\r\n~~~shell\r\njava -jar helloSpringBoot-1.0-SNAPSHOT.jar\r\n~~~\r\n\r\n![image-20210523182426404](img/image-20210523182426404.png)\r\n\r\n**第三步：**测试，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot\r\n\r\n得到结果：hello spring boot\r\n\r\n## 2.5 查看jar包内容\r\n\r\n~~~shell\r\njar tvf helloSpringBoot-1.0-SNAPSHOT.jar\r\n~~~\r\n\r\n# 3. 小结\r\n\r\n1. 通过Maven构建了一个空白Spring Boot项目，再通过引入web模块实现了一个简单的请求处理。\r\n2. 通过修改配置文件，更改端口号\r\n3. 编写了测试用例\r\n4. 打包jar包运行\r\n\r\n', '<h2>2018-01-04</h2>\n<pre><code class=\"lang-\"># 使用vue的Webpack模板生成脚手架\n</code></pre>\n<h2>2018-01-05</h2>\n<pre><code class=\"lang-\"># 引入ElementUI\n\n# babel-plugin-component自定义主题\n# 首页\n# 登陆页\n# 注册页面\n# 日志页\n</code></pre>\n<h2>2018-01-07</h2>\n<pre><code class=\"lang-\"># 调整底部栏始终固定在底部\n# 日志页 添加时间轴\n# 首页的文章列表\n</code></pre>\n<h2>2018-01-08</h2>\n<pre><code class=\"lang-\"># 使用组件-博客作者tab页 \n# 添加第三方图标\n</code></pre>\n<h2>2018-01-09</h2>\n<pre><code class=\"lang-\"># 调整顶部导航栏：激活文字颜色，click点击\n# 组件-最新文章tab页\n\n# 最新文章、最热文章使用相同组件\n# 底部栏设计\n# 页面与两边边距改为100\n</code></pre>\n<h2>2018-01-10</h2>\n<pre><code class=\"lang-\"># 写博客 引入mavonEditor编辑器\n# 顶部导航栏都放入一个Menu中\n# 写文章页面\n#　mavonEditor局部引入\n\n#　页面的中间区域固定宽度，自动居中\n# 发布和取消\n# 发布dialog\n\n</code></pre>\n<h2>2018-01-11</h2>\n<pre><code class=\"lang-\"># 文章组件用守卫来改变body背景色\n# 调整登陆和注册页面，使其居中\n\n#子页面调整根元素为div\n#文章详情页\n\n</code></pre>\n<h2>2018-01-12</h2>\n<pre><code class=\"lang-\"># 文章详情页  内容  评论等\n\n</code></pre>\n<h2>2018-01-13</h2>\n<pre><code class=\"lang-\">## 重新调整页面结构	\n#顶部和底部 抽成  BaseHeader BaseFooter 组件\n#BlogView为单独页，以前是Home的子路由\n\n</code></pre>\n<h2>2018-01-15</h2>\n<pre><code class=\"lang-\"># 文章分类去掉子级\n# 将首页的文章列表抽成 ArticleItem组件\n# 增加文章的评论展示\n# 增加文章分类、标签页\n\n</code></pre>\n<h2>2018-01-15  2</h2>\n<pre><code class=\"lang-\"># 回到顶部去掉过渡动画（影响顶部导航栏）\n# 顶部导航栏 增加登录后菜单\n# 首页增加 最热标签\n# 增加 文章分类 标签的详情页\n# 将文章详情页、 文章分类标签页 改为Home的子路由（以前单独页）\n# Home组件增加路由判断：更正导航栏的状态、条件显示底部栏\n\n</code></pre>\n<h2>2018-01-16</h2>\n<pre><code class=\"lang-\"># 将写文章的顶部Header合并到BaseHeader中\n# 图片都放到了static目录下\n\n</code></pre>\n<h2>2018-01-24</h2>\n<pre><code class=\"lang-\"># 将自定义的theme放到assets下\n# 加入axios\n# 加入vuex\n# 实现登录\n# 实现退出\n\n</code></pre>\n<h2>2018-01-25</h2>\n<pre><code class=\"lang-\"># 实现注册逻辑\n# 写文章功能实现\n# 写文章时支持插入图片\n\n</code></pre>\n<h2>2018-01-26</h2>\n<pre><code class=\"lang-\"># 引入lodash工具类\n# 优化写文章的工具栏：滚动时固定顶部\n# 写文章 后台获取文章分类和标签\n\n# 首页的文章列表\n\n</code></pre>\n<h2>2018-01-27</h2>\n<pre><code class=\"lang-\"># 修改首页文章列表的样式\n# 首页加载文章功能\n# 文章查看功能\n# 文章分类和标签功能列表\n\n</code></pre>\n<h2>2018-01-28</h2>\n<pre><code class=\"lang-\"># 文章分类和标签详情\n\n</code></pre>\n<h2>2018-01-29</h2>\n<pre><code class=\"lang-\"># 文章分类和标签的文章数\n# 首页最热文章\n# 首页最新文章\n# 首页最热标签\n\n</code></pre>\n<h2>2018-01-30</h2>\n<pre><code class=\"lang-\"># BaseHeader放回views中\n# 修改Axios后置拦截，全局处理错误\n# 将登录 退出 和头像 放到一起\n\n</code></pre>\n', 1);
INSERT INTO `ms_article_body` VALUES (20, 'Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\n\n如果你想在深入学习 Vue 之前对它有更多了解，我们制作了一个视频，带您了解其核心概念和一个示例工程。\n如果你已经是有经验的前端开发者，想知道 Vue 与其它库/框架有哪些区别，请查看对比其它框架。\n\n# 起步\n\n> 官方指南假设你已了解关于 HTML、CSS 和 JavaScript 的中级知识。如果你刚开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础知识再来吧！之前有其它框架的使用经验会有帮助，但这不是必需的。\n\n尝试 Vue.js 最简单的方法是使用 JSFiddle 上的 Hello World 例子。你可以在浏览器新标签页中打开它，跟着例子学习一些基础用法。或者你也可以创建一个 .html 文件，然后通过如下方式引入 Vue：\n\n```javascript\n<script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n\n```\n安装教程给出了更多安装 Vue 的方式。请注意我们不推荐新手直接使用 vue-cli，尤其是在你还不熟悉基于 Node.js 的构建工具时。\n\n# 声明式渲染\nVue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：\n```javascript\n<div id=\"app\">\n  {{ message }}\n</div>\n\n```\n```javascript\nvar app = new Vue({\n  el: \'#app\',\n  data: {\n    message: \'Hello Vue!\'\n  }\n})\n\n```\n我们已经成功创建了第一个 Vue 应用！看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 app.message 的值，你将看到上例相应地更新。\n\n除了文本插值，我们还可以像这样来绑定元素特性：\n\n\n\n\n\n\n', '<p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>\n<p>如果你想在深入学习 Vue 之前对它有更多了解，我们制作了一个视频，带您了解其核心概念和一个示例工程。<br />\n如果你已经是有经验的前端开发者，想知道 Vue 与其它库/框架有哪些区别，请查看对比其它框架。</p>\n<h1>起步</h1>\n<blockquote>\n<p>官方指南假设你已了解关于 HTML、CSS 和 JavaScript 的中级知识。如果你刚开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础知识再来吧！之前有其它框架的使用经验会有帮助，但这不是必需的。</p>\n</blockquote>\n<p>尝试 Vue.js 最简单的方法是使用 JSFiddle 上的 Hello World 例子。你可以在浏览器新标签页中打开它，跟着例子学习一些基础用法。或者你也可以创建一个 .html 文件，然后通过如下方式引入 Vue：</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">&lt;script src=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/vue\"</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n\n</code></div></pre>\n<p>安装教程给出了更多安装 Vue 的方式。请注意我们不推荐新手直接使用 vue-cli，尤其是在你还不熟悉基于 Node.js 的构建工具时。</p>\n<h1>声明式渲染</h1>\n<p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\">&lt;div id=<span class=\"hljs-string\">\"app\"</span>&gt;\n  {{ message }}\n&lt;<span class=\"hljs-regexp\">/div&gt;\n\n</span></code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">\'#app\'</span>,\n  <span class=\"hljs-attr\">data</span>: {\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\'Hello Vue!\'</span>\n  }\n})\n\n</code></div></pre>\n<p>我们已经成功创建了第一个 Vue 应用！看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 app.message 的值，你将看到上例相应地更新。</p>\n<p>除了文本插值，我们还可以像这样来绑定元素特性：</p>\n', 9);
INSERT INTO `ms_article_body` VALUES (21, '## 快速上手\n\n本节将介绍如何在项目中使用 Element。\n\n### 使用 Starter Kit\n我们提供了通用的项目模板，你可以直接使用。对于 Laravel 用户，我们也准备了相应的模板，同样可以直接下载使用。\n\n如果不希望使用我们提供的模板，请继续阅读。\n\n### 使用 vue-cli\n\n我们还可以使用 vue-cli 初始化项目，命令如下：\n\n```language\n> npm i -g vue-cli\n> mkdir my-project && cd my-project\n> vue init webpack\n> npm i && npm i element-ui\n```\n\n### 引入 Element\n你可以引入整个 Element，或是根据需要仅引入部分组件。我们先介绍如何引入完整的 Element。\n\n#### 完整引入\n在 main.js 中写入以下内容：\n```javascript\nimport Vue from \'vue\'\nimport ElementUI from \'element-ui\'\nimport \'element-ui/lib/theme-chalk/index.css\'\nimport App from \'./App.vue\'\n\nVue.use(ElementUI)\n\nnew Vue({\n  el: \'#app\',\n  render: h => h(App)\n})\n\n```\n以上代码便完成了 Element 的引入。需要注意的是，样式文件需要单独引入。\n\n#### 按需引入\n借助 babel-plugin-component，我们可以只引入需要的组件，以达到减小项目体积的目的。\n\n首先，安装 babel-plugin-component：\n\n', '<h2>快速上手</h2>\n<p>本节将介绍如何在项目中使用 Element。</p>\n<h3>使用 Starter Kit</h3>\n<p>我们提供了通用的项目模板，你可以直接使用。对于 Laravel 用户，我们也准备了相应的模板，同样可以直接下载使用。</p>\n<p>如果不希望使用我们提供的模板，请继续阅读。</p>\n<h3>使用 vue-cli</h3>\n<p>我们还可以使用 vue-cli 初始化项目，命令如下：</p>\n<pre><code class=\"lang-language\">&gt; npm i -g vue-cli\n&gt; mkdir my-project &amp;&amp; cd my-project\n&gt; vue init webpack\n&gt; npm i &amp;&amp; npm i element-ui\n</code></pre>\n<h3>引入 Element</h3>\n<p>你可以引入整个 Element，或是根据需要仅引入部分组件。我们先介绍如何引入完整的 Element。</p>\n<h4>完整引入</h4>\n<p>在 main.js 中写入以下内容：</p>\n<pre><div class=\"hljs\"><code class=\"lang-javascript\"><span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'vue\'</span>\n<span class=\"hljs-keyword\">import</span> ElementUI <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'element-ui\'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\'element-ui/lib/theme-chalk/index.css\'</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'./App.vue\'</span>\n\nVue.use(ElementUI)\n\n<span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-attr\">el</span>: <span class=\"hljs-string\">\'#app\'</span>,\n  <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">h</span> =&gt;</span> h(App)\n})\n\n</code></div></pre>\n<p>以上代码便完成了 Element 的引入。需要注意的是，样式文件需要单独引入。</p>\n<h4>按需引入</h4>\n<p>借助 babel-plugin-component，我们可以只引入需要的组件，以达到减小项目体积的目的。</p>\n<p>首先，安装 babel-plugin-component：</p>\n', 10);
INSERT INTO `ms_article_body` VALUES (1405564731351162882, '666666666666', '<p>666666666666</p>\n', 1405564731300831233);
INSERT INTO `ms_article_body` VALUES (1405909844828909569, '# 1. Spring Boot介绍\n\n## 1.1 简介\n\n在您第1次接触和学习Spring框架的时候，是否因为其繁杂的配置而退却了？\n\n在你第n次使用Spring框架的时候，是否觉得一堆反复黏贴的配置有一些厌烦？\n\n那么您就不妨来试试使用Spring Boot来让你更易上手，更简单快捷地构建Spring应用！\n\nSpring Boot让我们的Spring应用变的更轻量化。\n\n我们不必像以前那样繁琐的构建项目、打包应用、部署到Tomcat等应用服务器中来运行我们的业务服务。\n\n通过Spring Boot实现的服务，只需要依靠一个Java类，把它打包成jar，并通过`java -jar`命令就可以运行起来。\n\n这一切相较于传统Spring应用来说，已经变得非常的轻便、简单。\n\n**总结一下Spring Boot的主要优点：**\n\n1. 为所有Spring开发者更快的入门\n2. 开箱即用，提供各种默认配置来简化项目配置\n3. 内嵌式容器简化Web项目\n4. 没有冗余代码生成和XML配置的要求\n5. 统一的依赖管理\n6. 自动装配，更易使用，更易扩展\n\n## 1.2 使用版本说明\n\nSpringboot版本：使用最新的2.5.0版本\n\n教程参考了官方文档进行制作，权威。\n\n其他依赖版本：\n\n	1. Maven  需求：3.5+\n\n   	2. JDK 需求  8+\n   	3. Spring Framework 5.3.7以上版本\n   	4. Tomcat 9.0\n   	5. Servlet版本 4.0  但是可以部署到Servlet到3.1+的容器中\n\n# 2. 快速入门\n\n快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。\n\n教程使用的Idea版本：2019.3\n\n## 2.1 创建基础项目\n\n**第一步：** 创建maven项目\n\npom.xml :\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.xiaopizhu</groupId>\n    <artifactId>helloSpringBoot</artifactId>\n    <version>1.0-SNAPSHOT</version>\n	<!--springboot的父工程其中定义了常用的依赖，并且无依赖冲突-->\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.0</version>\n    </parent>\n</project>\n~~~\n\n注意上方的parent必须加，其中定义了springboot官方支持的n多依赖，基本上常用的已经有了，所以接下来导入依赖的时候，绝大部分都可以不加版本号。\n\n此时的工程结构为：\n\n![image20210523173241557.png](https://static.mszlu.com/6fc39758-0db2-431d-9f94-a705aa2c7e59.png)\n\n**第二步：** 添加web依赖\n\n~~~xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n~~~\n\n添加上方的web依赖，其中间接依赖了spring-web，spring-webmvc，spring-core等spring和springmvc的包，并且集成了tomcat。\n\n**第三步：** 编写启动类\n\n~~~java\npackage com.xiaopizhu.springboot;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class HelloApp {\n\n    public static void main(String[] args) {\n        SpringApplication.run(HelloApp.class,args);\n    }\n}\n\n~~~\n\n@SpringBootApplication注解标识了HelloApp为启动类，也是Spring Boot的核心。\n\n**第四步：** 运行启动类的main方法\n\n![image-20210523173712142](img/image-20210523173712142.png)\n\n看到如上配置，证明启动成功，tomcat端口号默认为8080。\n\n**第五步：**  如果想要修改端口号，可以在resources目录下新建application.properties\n\n~~~properties\nserver.port=8082\n~~~\n\n**第六步：** 重新运行\n\n![image-20210523174011613](img/image-20210523174011613.png)\n\n此时的项目结构为：\n\n![image-20210523174032053](img/image-20210523174032053.png)\n\n**src/main/java :**  编写java代码，注意启动类需要放在项目的根包下。\n\n**src/main/resources:**  放置资源的目录，比如springboot的配置文件，静态文件，mybatis配置，日志配置等。\n\n**src/test/java:**  测试代码\n\n## 2.2 编写一个Http接口\n\n**第一步：**  创建`HelloController`类，内容如下：\n\n~~~java\npackage com.xiaopizhu.springboot.controller;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"hello\")\npublic class HelloController {\n\n    @GetMapping(\"boot\")\n    public String hello(){\n        return \"hello spring boot\";\n    }\n\n}\n\n~~~\n\n**注意包名，必须在启动类所在的包名下。**\n\n**第二步： ** 重启程序，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot\n\n得到结果：hello spring boot\n\n## 2.3 编写单元测试用例\n\n**第一步： ** 添加spring boot测试依赖\n\n~~~xml\n		<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n~~~\n\n**第二步：** 在src/test 下，编写测试用例\n\n~~~java\npackage com.xiaopizhu.springboot.controller;\n\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n@SpringBootTest\npublic class TestHelloController {\n\n    private MockMvc mockMvc;\n\n    @BeforeEach\n    public void beforeEach(){\n        mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()).build();\n    }\n    @Test\n    public void testHello() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/hello/boot\")\n                .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(content().string(equalTo(\"hello spring boot\")));\n    }\n}\n\n~~~\n\n上面的测试用例，是构建一个空的`WebApplicationContext`，并且在before中加载了HelloController，得以在测试用例中mock调用，模拟请求。\n\n## 2.4 打包为jar运行\n\n**第一步：** 添加打包(maven构建springboot)插件\n\n~~~xml\n  <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n~~~\n\n在idea的右侧 maven中，使用package来打包程序，打包完成后，在target目录下生成helloSpringBoot-1.0-SNAPSHOT.jar\n\n![image-20210523181737720](img/image-20210523181737720.png)\n\n**第二步： ** 打开cmd：找到jar对应的目录\n\n输入命令\n\n~~~shell\njava -jar helloSpringBoot-1.0-SNAPSHOT.jar\n~~~\n\n![image-20210523182426404](img/image-20210523182426404.png)\n\n**第三步：**  测试，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot\n\n得到结果：hello spring boot\n\n## 2.5 查看jar包内容\n\n~~~shell\njar tvf helloSpringBoot-1.0-SNAPSHOT.jar\n~~~\n\n# 3. 小结\n\n1. 通过Maven构建了一个空白Spring Boot项目，再通过引入web模块实现了一个简单的请求处理。\n2. 通过修改配置文件，更改端口号\n3. 编写了测试用例\n4. 打包jar包运行\n\n', '<h1><a id=\"1_Spring_Boot_0\"></a>1. Spring Boot介绍</h1>\n<h2><a id=\"11__2\"></a>1.1 简介</h2>\n<p>在您第1次接触和学习Spring框架的时候，是否因为其繁杂的配置而退却了？</p>\n<p>在你第n次使用Spring框架的时候，是否觉得一堆反复黏贴的配置有一些厌烦？</p>\n<p>那么您就不妨来试试使用Spring Boot来让你更易上手，更简单快捷地构建Spring应用！</p>\n<p>Spring Boot让我们的Spring应用变的更轻量化。</p>\n<p>我们不必像以前那样繁琐的构建项目、打包应用、部署到Tomcat等应用服务器中来运行我们的业务服务。</p>\n<p>通过Spring Boot实现的服务，只需要依靠一个Java类，把它打包成jar，并通过<code>java -jar</code>命令就可以运行起来。</p>\n<p>这一切相较于传统Spring应用来说，已经变得非常的轻便、简单。</p>\n<p><strong>总结一下Spring Boot的主要优点：</strong></p>\n<ol>\n<li>为所有Spring开发者更快的入门</li>\n<li>开箱即用，提供各种默认配置来简化项目配置</li>\n<li>内嵌式容器简化Web项目</li>\n<li>没有冗余代码生成和XML配置的要求</li>\n<li>统一的依赖管理</li>\n<li>自动装配，更易使用，更易扩展</li>\n</ol>\n<h2><a id=\"12__27\"></a>1.2 使用版本说明</h2>\n<p>Springboot版本：使用最新的2.5.0版本</p>\n<p>教程参考了官方文档进行制作，权威。</p>\n<p>其他依赖版本：</p>\n<pre><code>1. Maven  需求：3.5+\n\n2. JDK 需求  8+\n3. Spring Framework 5.3.7以上版本\n4. Tomcat 9.0\n5. Servlet版本 4.0  但是可以部署到Servlet到3.1+的容器中\n</code></pre>\n<h1><a id=\"2__42\"></a>2. 快速入门</h1>\n<p>快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。</p>\n<p>教程使用的Idea版本：2019.3</p>\n<h2><a id=\"21__48\"></a>2.1 创建基础项目</h2>\n<p><strong>第一步：</strong> 创建maven项目</p>\n<p>pom.xml :</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?</span>xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"UTF-8\"</span><span class=\"hljs-meta\">?&gt;</span></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0\"</span>\n         <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n         <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modelVersion</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modelVersion</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.xiaopizhu<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>helloSpringBoot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n	<span class=\"hljs-comment\">&lt;!--springboot的父工程其中定义了常用的依赖，并且无依赖冲突--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.5.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span>\n</code></div></pre>\n<p>注意上方的parent必须加，其中定义了springboot官方支持的n多依赖，基本上常用的已经有了，所以接下来导入依赖的时候，绝大部分都可以不加版本号。</p>\n<p>此时的工程结构为：</p>\n<p><img src=\"https://static.mszlu.com/6fc39758-0db2-431d-9f94-a705aa2c7e59.png\" alt=\"image20210523173241557.png\" /></p>\n<p><strong>第二步：</strong> 添加web依赖</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n</code></div></pre>\n<p>添加上方的web依赖，其中间接依赖了spring-web，spring-webmvc，spring-core等spring和springmvc的包，并且集成了tomcat。</p>\n<p><strong>第三步：</strong> 编写启动类</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.xiaopizhu.springboot;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.SpringApplication;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;\n\n<span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloApp</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        SpringApplication.run(HelloApp.class,args);\n    }\n}\n\n</code></div></pre>\n<p>@SpringBootApplication注解标识了HelloApp为启动类，也是Spring Boot的核心。</p>\n<p><strong>第四步：</strong> 运行启动类的main方法</p>\n<p><img src=\"img/image-20210523173712142.png\" alt=\"image-20210523173712142\" /></p>\n<p>看到如上配置，证明启动成功，tomcat端口号默认为8080。</p>\n<p><strong>第五步：</strong>  如果想要修改端口号，可以在resources目录下新建application.properties</p>\n<pre><code class=\"lang-properties\">server.port=8082\n</code></pre>\n<p><strong>第六步：</strong> 重新运行</p>\n<p><img src=\"img/image-20210523174011613.png\" alt=\"image-20210523174011613\" /></p>\n<p>此时的项目结构为：</p>\n<p><img src=\"img/image-20210523174032053.png\" alt=\"image-20210523174032053\" /></p>\n<p><strong>src/main/java :</strong>  编写java代码，注意启动类需要放在项目的根包下。</p>\n<p><strong>src/main/resources:</strong>  放置资源的目录，比如springboot的配置文件，静态文件，mybatis配置，日志配置等。</p>\n<p><strong>src/test/java:</strong>  测试代码</p>\n<h2><a id=\"22_Http_138\"></a>2.2 编写一个Http接口</h2>\n<p><strong>第一步：</strong>  创建<code>HelloController</code>类，内容如下：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.xiaopizhu.springboot.controller;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RestController;\n\n<span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-meta\">@RequestMapping</span>(<span class=\"hljs-string\">\"hello\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloController</span> </span>{\n\n    <span class=\"hljs-meta\">@GetMapping</span>(<span class=\"hljs-string\">\"boot\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">hello</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"hello spring boot\"</span>;\n    }\n\n}\n\n</code></div></pre>\n<p><strong>注意包名，必须在启动类所在的包名下。</strong></p>\n<p>**第二步： ** 重启程序，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot</p>\n<p>得到结果：hello spring boot</p>\n<h2><a id=\"23__168\"></a>2.3 编写单元测试用例</h2>\n<p>**第一步： ** 添加spring boot测试依赖</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\">		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></div></pre>\n<p><strong>第二步：</strong> 在src/test 下，编写测试用例</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.xiaopizhu.springboot.controller;\n\n<span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.BeforeAll;\n<span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.BeforeEach;\n<span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;\n<span class=\"hljs-keyword\">import</span> org.springframework.http.MediaType;\n<span class=\"hljs-keyword\">import</span> org.springframework.test.web.servlet.MockMvc;\n<span class=\"hljs-keyword\">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n<span class=\"hljs-keyword\">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> org.hamcrest.Matchers.equalTo;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n<span class=\"hljs-meta\">@SpringBootTest</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestHelloController</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> MockMvc mockMvc;\n\n    <span class=\"hljs-meta\">@BeforeEach</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">beforeEach</span><span class=\"hljs-params\">()</span></span>{\n        mockMvc = MockMvcBuilders.standaloneSetup(<span class=\"hljs-keyword\">new</span> HelloController()).build();\n    }\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testHello</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        mockMvc.perform(MockMvcRequestBuilders.get(<span class=\"hljs-string\">\"/hello/boot\"</span>)\n                .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(content().string(equalTo(<span class=\"hljs-string\">\"hello spring boot\"</span>)));\n    }\n}\n\n</code></div></pre>\n<p>上面的测试用例，是构建一个空的<code>WebApplicationContext</code>，并且在before中加载了HelloController，得以在测试用例中mock调用，模拟请求。</p>\n<h2><a id=\"24_jar_220\"></a>2.4 打包为jar运行</h2>\n<p><strong>第一步：</strong> 添加打包(maven构建springboot)插件</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span>\n</code></div></pre>\n<p>在idea的右侧 maven中，使用package来打包程序，打包完成后，在target目录下生成helloSpringBoot-1.0-SNAPSHOT.jar</p>\n<p><img src=\"img/image-20210523181737720.png\" alt=\"image-20210523181737720\" /></p>\n<p>**第二步： ** 打开cmd：找到jar对应的目录</p>\n<p>输入命令</p>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">java -jar helloSpringBoot-1.0-SNAPSHOT.jar\n</code></div></pre>\n<p><img src=\"img/image-20210523182426404.png\" alt=\"image-20210523182426404\" /></p>\n<p><strong>第三步：</strong>  测试，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot</p>\n<p>得到结果：hello spring boot</p>\n<h2><a id=\"25_jar_253\"></a>2.5 查看jar包内容</h2>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">jar tvf helloSpringBoot-1.0-SNAPSHOT.jar\n</code></div></pre>\n<h1><a id=\"3__259\"></a>3. 小结</h1>\n<ol>\n<li>通过Maven构建了一个空白Spring Boot项目，再通过引入web模块实现了一个简单的请求处理。</li>\n<li>通过修改配置文件，更改端口号</li>\n<li>编写了测试用例</li>\n<li>打包jar包运行</li>\n</ol>\n', 1405909844724051969);
INSERT INTO `ms_article_body` VALUES (1405916999854342146, '# 1. Spring Boot介绍\n\n## 1.1 简介\n\n在您第1次接触和学习Spring框架的时候，是否因为其繁杂的配置而退却了？\n\n在你第n次使用Spring框架的时候，是否觉得一堆反复黏贴的配置有一些厌烦？\n\n那么您就不妨来试试使用Spring Boot来让你更易上手，更简单快捷地构建Spring应用！\n\nSpring Boot让我们的Spring应用变的更轻量化。\n\n我们不必像以前那样繁琐的构建项目、打包应用、部署到Tomcat等应用服务器中来运行我们的业务服务。\n\n通过Spring Boot实现的服务，只需要依靠一个Java类，把它打包成jar，并通过`java -jar`命令就可以运行起来。\n\n这一切相较于传统Spring应用来说，已经变得非常的轻便、简单。\n\n**总结一下Spring Boot的主要优点：**\n\n1. 为所有Spring开发者更快的入门\n2. 开箱即用，提供各种默认配置来简化项目配置\n3. 内嵌式容器简化Web项目\n4. 没有冗余代码生成和XML配置的要求\n5. 统一的依赖管理\n6. 自动装配，更易使用，更易扩展\n\n## 1.2 使用版本说明\n\nSpringboot版本：使用最新的2.5.0版本\n\n教程参考了官方文档进行制作，权威。\n\n其他依赖版本：\n\n	1. Maven  需求：3.5+\n\n   	2. JDK 需求  8+\n   	3. Spring Framework 5.3.7以上版本\n   	4. Tomcat 9.0\n   	5. Servlet版本 4.0  但是可以部署到Servlet到3.1+的容器中\n\n# 2. 快速入门\n\n快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。\n\n教程使用的Idea版本：2019.3\n\n## 2.1 创建基础项目\n\n**第一步：** 创建maven项目\n\npom.xml :\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.xiaopizhu</groupId>\n    <artifactId>helloSpringBoot</artifactId>\n    <version>1.0-SNAPSHOT</version>\n	<!--springboot的父工程其中定义了常用的依赖，并且无依赖冲突-->\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.5.0</version>\n    </parent>\n</project>\n~~~\n\n注意上方的parent必须加，其中定义了springboot官方支持的n多依赖，基本上常用的已经有了，所以接下来导入依赖的时候，绝大部分都可以不加版本号。\n\n此时的工程结构为：\n\n![image20210523173241557.png](https://static.mszlu.com/a7302c88-e106-46ad-9713-dc9a6d523957.png)\n\n**第二步：** 添加web依赖\n\n~~~xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n~~~\n\n添加上方的web依赖，其中间接依赖了spring-web，spring-webmvc，spring-core等spring和springmvc的包，并且集成了tomcat。\n\n**第三步：** 编写启动类\n\n~~~java\npackage com.xiaopizhu.springboot;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class HelloApp {\n\n    public static void main(String[] args) {\n        SpringApplication.run(HelloApp.class,args);\n    }\n}\n\n~~~\n\n@SpringBootApplication注解标识了HelloApp为启动类，也是Spring Boot的核心。\n\n**第四步：** 运行启动类的main方法\n\n![image20210523173712142.png](https://static.mszlu.com/dc17b43e-08df-46b0-bb7a-eb73044de7da.png)\n\n看到如上配置，证明启动成功，tomcat端口号默认为8080。\n\n**第五步：**  如果想要修改端口号，可以在resources目录下新建application.properties\n\n~~~properties\nserver.port=8082\n~~~\n\n**第六步：** 重新运行\n\n![image20210523174011613.png](https://static.mszlu.com/318e4b7e-95d2-4e43-a18f-279ea6ff9495.png)\n\n此时的项目结构为：\n\n![image20210523174032053.png](https://static.mszlu.com/756e4ae0-c4c7-43a5-9b5d-bc7ce974a942.png)\n\n**src/main/java :**  编写java代码，注意启动类需要放在项目的根包下。\n\n**src/main/resources:**  放置资源的目录，比如springboot的配置文件，静态文件，mybatis配置，日志配置等。\n\n**src/test/java:**  测试代码\n\n## 2.2 编写一个Http接口\n\n**第一步：**  创建`HelloController`类，内容如下：\n\n~~~java\npackage com.xiaopizhu.springboot.controller;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"hello\")\npublic class HelloController {\n\n    @GetMapping(\"boot\")\n    public String hello(){\n        return \"hello spring boot\";\n    }\n\n}\n\n~~~\n\n**注意包名，必须在启动类所在的包名下。**\n\n**第二步： ** 重启程序，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot\n\n得到结果：hello spring boot\n\n## 2.3 编写单元测试用例\n\n**第一步： ** 添加spring boot测试依赖\n\n~~~xml\n		<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n~~~\n\n**第二步：** 在src/test 下，编写测试用例\n\n~~~java\npackage com.xiaopizhu.springboot.controller;\n\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n@SpringBootTest\npublic class TestHelloController {\n\n    private MockMvc mockMvc;\n\n    @BeforeEach\n    public void beforeEach(){\n        mockMvc = MockMvcBuilders.standaloneSetup(new HelloController()).build();\n    }\n    @Test\n    public void testHello() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/hello/boot\")\n                .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(content().string(equalTo(\"hello spring boot\")));\n    }\n}\n\n~~~\n\n上面的测试用例，是构建一个空的`WebApplicationContext`，并且在before中加载了HelloController，得以在测试用例中mock调用，模拟请求。\n\n## 2.4 打包为jar运行\n\n**第一步：** 添加打包(maven构建springboot)插件\n\n~~~xml\n  <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n~~~\n\n在idea的右侧 maven中，使用package来打包程序，打包完成后，在target目录下生成helloSpringBoot-1.0-SNAPSHOT.jar\n\n![image20210523181737720.png](https://static.mszlu.com/45aa0db2-598f-4564-964c-a2d889dfbafe.png)\n\n**第二步： ** 打开cmd：找到jar对应的目录\n\n输入命令\n\n~~~shell\njava -jar helloSpringBoot-1.0-SNAPSHOT.jar\n~~~\n\n![image20210523182426404.png](https://static.mszlu.com/74376f77-b8eb-4c2c-a4cc-d3bfe24901e3.png)\n\n**第三步：**  测试，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot\n\n得到结果：hello spring boot\n\n## 2.5 查看jar包内容\n\n~~~shell\njar tvf helloSpringBoot-1.0-SNAPSHOT.jar\n~~~\n\n# 3. 小结\n\n1. 通过Maven构建了一个空白Spring Boot项目，再通过引入web模块实现了一个简单的请求处理。\n2. 通过修改配置文件，更改端口号\n3. 编写了测试用例\n4. 打包jar包运行\n\n', '<h1><a id=\"1_Spring_Boot_0\"></a>1. Spring Boot介绍</h1>\n<h2><a id=\"11__2\"></a>1.1 简介</h2>\n<p>在您第1次接触和学习Spring框架的时候，是否因为其繁杂的配置而退却了？</p>\n<p>在你第n次使用Spring框架的时候，是否觉得一堆反复黏贴的配置有一些厌烦？</p>\n<p>那么您就不妨来试试使用Spring Boot来让你更易上手，更简单快捷地构建Spring应用！</p>\n<p>Spring Boot让我们的Spring应用变的更轻量化。</p>\n<p>我们不必像以前那样繁琐的构建项目、打包应用、部署到Tomcat等应用服务器中来运行我们的业务服务。</p>\n<p>通过Spring Boot实现的服务，只需要依靠一个Java类，把它打包成jar，并通过<code>java -jar</code>命令就可以运行起来。</p>\n<p>这一切相较于传统Spring应用来说，已经变得非常的轻便、简单。</p>\n<p><strong>总结一下Spring Boot的主要优点：</strong></p>\n<ol>\n<li>为所有Spring开发者更快的入门</li>\n<li>开箱即用，提供各种默认配置来简化项目配置</li>\n<li>内嵌式容器简化Web项目</li>\n<li>没有冗余代码生成和XML配置的要求</li>\n<li>统一的依赖管理</li>\n<li>自动装配，更易使用，更易扩展</li>\n</ol>\n<h2><a id=\"12__27\"></a>1.2 使用版本说明</h2>\n<p>Springboot版本：使用最新的2.5.0版本</p>\n<p>教程参考了官方文档进行制作，权威。</p>\n<p>其他依赖版本：</p>\n<pre><code>1. Maven  需求：3.5+\n\n2. JDK 需求  8+\n3. Spring Framework 5.3.7以上版本\n4. Tomcat 9.0\n5. Servlet版本 4.0  但是可以部署到Servlet到3.1+的容器中\n</code></pre>\n<h1><a id=\"2__42\"></a>2. 快速入门</h1>\n<p>快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，并体验其结构简单、开发快速的特性。</p>\n<p>教程使用的Idea版本：2019.3</p>\n<h2><a id=\"21__48\"></a>2.1 创建基础项目</h2>\n<p><strong>第一步：</strong> 创建maven项目</p>\n<p>pom.xml :</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?</span>xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"UTF-8\"</span><span class=\"hljs-meta\">?&gt;</span></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0\"</span>\n         <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n         <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modelVersion</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modelVersion</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.xiaopizhu<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>helloSpringBoot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n	<span class=\"hljs-comment\">&lt;!--springboot的父工程其中定义了常用的依赖，并且无依赖冲突--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.5.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span>\n</code></div></pre>\n<p>注意上方的parent必须加，其中定义了springboot官方支持的n多依赖，基本上常用的已经有了，所以接下来导入依赖的时候，绝大部分都可以不加版本号。</p>\n<p>此时的工程结构为：</p>\n<p><img src=\"https://static.mszlu.com/a7302c88-e106-46ad-9713-dc9a6d523957.png\" alt=\"image20210523173241557.png\" /></p>\n<p><strong>第二步：</strong> 添加web依赖</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n</code></div></pre>\n<p>添加上方的web依赖，其中间接依赖了spring-web，spring-webmvc，spring-core等spring和springmvc的包，并且集成了tomcat。</p>\n<p><strong>第三步：</strong> 编写启动类</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.xiaopizhu.springboot;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.SpringApplication;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;\n\n<span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloApp</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        SpringApplication.run(HelloApp.class,args);\n    }\n}\n\n</code></div></pre>\n<p>@SpringBootApplication注解标识了HelloApp为启动类，也是Spring Boot的核心。</p>\n<p><strong>第四步：</strong> 运行启动类的main方法</p>\n<p><img src=\"https://static.mszlu.com/dc17b43e-08df-46b0-bb7a-eb73044de7da.png\" alt=\"image20210523173712142.png\" /></p>\n<p>看到如上配置，证明启动成功，tomcat端口号默认为8080。</p>\n<p><strong>第五步：</strong>  如果想要修改端口号，可以在resources目录下新建application.properties</p>\n<pre><code class=\"lang-properties\">server.port=8082\n</code></pre>\n<p><strong>第六步：</strong> 重新运行</p>\n<p><img src=\"https://static.mszlu.com/318e4b7e-95d2-4e43-a18f-279ea6ff9495.png\" alt=\"image20210523174011613.png\" /></p>\n<p>此时的项目结构为：</p>\n<p><img src=\"https://static.mszlu.com/756e4ae0-c4c7-43a5-9b5d-bc7ce974a942.png\" alt=\"image20210523174032053.png\" /></p>\n<p><strong>src/main/java :</strong>  编写java代码，注意启动类需要放在项目的根包下。</p>\n<p><strong>src/main/resources:</strong>  放置资源的目录，比如springboot的配置文件，静态文件，mybatis配置，日志配置等。</p>\n<p><strong>src/test/java:</strong>  测试代码</p>\n<h2><a id=\"22_Http_138\"></a>2.2 编写一个Http接口</h2>\n<p><strong>第一步：</strong>  创建<code>HelloController</code>类，内容如下：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.xiaopizhu.springboot.controller;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RestController;\n\n<span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-meta\">@RequestMapping</span>(<span class=\"hljs-string\">\"hello\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloController</span> </span>{\n\n    <span class=\"hljs-meta\">@GetMapping</span>(<span class=\"hljs-string\">\"boot\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">hello</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"hello spring boot\"</span>;\n    }\n\n}\n\n</code></div></pre>\n<p><strong>注意包名，必须在启动类所在的包名下。</strong></p>\n<p>**第二步： ** 重启程序，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot</p>\n<p>得到结果：hello spring boot</p>\n<h2><a id=\"23__168\"></a>2.3 编写单元测试用例</h2>\n<p>**第一步： ** 添加spring boot测试依赖</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\">		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></div></pre>\n<p><strong>第二步：</strong> 在src/test 下，编写测试用例</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.xiaopizhu.springboot.controller;\n\n<span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.BeforeAll;\n<span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.BeforeEach;\n<span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;\n<span class=\"hljs-keyword\">import</span> org.springframework.http.MediaType;\n<span class=\"hljs-keyword\">import</span> org.springframework.test.web.servlet.MockMvc;\n<span class=\"hljs-keyword\">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n<span class=\"hljs-keyword\">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> org.hamcrest.Matchers.equalTo;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n<span class=\"hljs-meta\">@SpringBootTest</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestHelloController</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> MockMvc mockMvc;\n\n    <span class=\"hljs-meta\">@BeforeEach</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">beforeEach</span><span class=\"hljs-params\">()</span></span>{\n        mockMvc = MockMvcBuilders.standaloneSetup(<span class=\"hljs-keyword\">new</span> HelloController()).build();\n    }\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testHello</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        mockMvc.perform(MockMvcRequestBuilders.get(<span class=\"hljs-string\">\"/hello/boot\"</span>)\n                .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(content().string(equalTo(<span class=\"hljs-string\">\"hello spring boot\"</span>)));\n    }\n}\n\n</code></div></pre>\n<p>上面的测试用例，是构建一个空的<code>WebApplicationContext</code>，并且在before中加载了HelloController，得以在测试用例中mock调用，模拟请求。</p>\n<h2><a id=\"24_jar_220\"></a>2.4 打包为jar运行</h2>\n<p><strong>第一步：</strong> 添加打包(maven构建springboot)插件</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span>\n</code></div></pre>\n<p>在idea的右侧 maven中，使用package来打包程序，打包完成后，在target目录下生成helloSpringBoot-1.0-SNAPSHOT.jar</p>\n<p><img src=\"https://static.mszlu.com/45aa0db2-598f-4564-964c-a2d889dfbafe.png\" alt=\"image20210523181737720.png\" /></p>\n<p>**第二步： ** 打开cmd：找到jar对应的目录</p>\n<p>输入命令</p>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">java -jar helloSpringBoot-1.0-SNAPSHOT.jar\n</code></div></pre>\n<p><img src=\"https://static.mszlu.com/74376f77-b8eb-4c2c-a4cc-d3bfe24901e3.png\" alt=\"image20210523182426404.png\" /></p>\n<p><strong>第三步：</strong>  测试，使用postman或者直接在浏览器输入http://localhost:8082/hello/boot</p>\n<p>得到结果：hello spring boot</p>\n<h2><a id=\"25_jar_253\"></a>2.5 查看jar包内容</h2>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">jar tvf helloSpringBoot-1.0-SNAPSHOT.jar\n</code></div></pre>\n<h1><a id=\"3__259\"></a>3. 小结</h1>\n<ol>\n<li>通过Maven构建了一个空白Spring Boot项目，再通过引入web模块实现了一个简单的请求处理。</li>\n<li>通过修改配置文件，更改端口号</li>\n<li>编写了测试用例</li>\n<li>打包jar包运行</li>\n</ol>\n', 1405916999732707330);
INSERT INTO `ms_article_body` VALUES (1468182881431461890, '![modao.jpg](http://r3qle33oa.hn-bkt.clouddn.com/d5ea33ca-1bad-4234-959a-4f9fa6e0db25.jpg)\n魔刀千刃，是国漫《刺客伍六七》系列中的一把强力武器。是玄武国首席暗影刺客柒的佩刀，神锻国的国宝之一，被千年恶灵看守。刀刃是由上千块碎片组成，黑色刀柄半截刀身，刀身上有蓝色条纹，显现出的是恶灵的图案，可以发出蓝色或紫色的光。只有条纹发光，才可以发挥出强大的力量。\n**“只攻不防，天下无双。——魔刀千刃”**', '<p><img src=\"http://r3qle33oa.hn-bkt.clouddn.com/d5ea33ca-1bad-4234-959a-4f9fa6e0db25.jpg\" alt=\"modao.jpg\" /><br />\n魔刀千刃，是国漫《刺客伍六七》系列中的一把强力武器。是玄武国首席暗影刺客柒的佩刀，神锻国的国宝之一，被千年恶灵看守。刀刃是由上千块碎片组成，黑色刀柄半截刀身，刀身上有蓝色条纹，显现出的是恶灵的图案，可以发出蓝色或紫色的光。只有条纹发光，才可以发挥出强大的力量。<br />\n<strong>“只攻不防，天下无双。——魔刀千刃”</strong></p>\n', 1468182881431461889);
INSERT INTO `ms_article_body` VALUES (1468187310331285506, '## 我是神', '<h2><a id=\"_0\"></a>我是神</h2>\n', 1468187310301925377);
INSERT INTO `ms_article_body` VALUES (1468192662275837954, '![村正.jpg](http://r3qle33oa.hn-bkt.clouddn.com/edbd2156-0f48-47f6-844a-562e198e0781.jpg)\n村正（平假名：むらまさ，Muramasa），可视为一类日本刀的名字，别名千子村正（平假名：せんごむらまさ，SengoMuramasa），在伊势国桑名（现今的三重县桑名市）为一族活跃刀匠的名字，当时村正家族所铸造的刀均称为村正，后因历史原因也出现一些名为村正的日本刀。\n村正，日本最有名的日本刀之一。原是室町中期至天正年间约一百年间的伊势的刀工之名，其时正是日本进入战国时代的动荡时期，对于日本刀的需求很大。村正只生产最优秀的、可用于实战的刀。 也许是因为它太过锐利，到了江户时代就开始有“邪剑”、“妖刀”的称号，而被世人所避忌。在现存的妖刀中，以被称做“妙法村正”的最为有名。\n村正可以被定义为村正家族联产的刀，是一种日本刀的类别，并不特指或局限于某一把刀。', '<p><img src=\"http://r3qle33oa.hn-bkt.clouddn.com/edbd2156-0f48-47f6-844a-562e198e0781.jpg\" alt=\"村正.jpg\" /><br />\n村正（平假名：むらまさ，Muramasa），可视为一类日本刀的名字，别名千子村正（平假名：せんごむらまさ，SengoMuramasa），在伊势国桑名（现今的三重县桑名市）为一族活跃刀匠的名字，当时村正家族所铸造的刀均称为村正，后因历史原因也出现一些名为村正的日本刀。<br />\n村正，日本最有名的日本刀之一。原是室町中期至天正年间约一百年间的伊势的刀工之名，其时正是日本进入战国时代的动荡时期，对于日本刀的需求很大。村正只生产最优秀的、可用于实战的刀。 也许是因为它太过锐利，到了江户时代就开始有“邪剑”、“妖刀”的称号，而被世人所避忌。在现存的妖刀中，以被称做“妙法村正”的最为有名。<br />\n村正可以被定义为村正家族联产的刀，是一种日本刀的类别，并不特指或局限于某一把刀。</p>\n', 1468192662137425921);
INSERT INTO `ms_article_body` VALUES (1468227279322206210, '测试![赛博朋克壁纸.jpg](http://r3qle33oa.hn-bkt.clouddn.com/6927665b-23e9-4609-994a-1eeeaededff5.jpg)', '<p>测试<img src=\"http://r3qle33oa.hn-bkt.clouddn.com/6927665b-23e9-4609-994a-1eeeaededff5.jpg\" alt=\"赛博朋克壁纸.jpg\" /></p>\n', 1468227279309623298);
INSERT INTO `ms_article_body` VALUES (1468231964527546370, '~~~ java /**\n     * user转换为loginVo\n     * @param sysUser\n     * @return\n     */\n    private LoginVo userToLoginVo(SysUser sysUser) {\n        LoginVo loginVo =new LoginVo();\n        BeanUtils.copyProperties(sysUser, loginVo);\n        return loginVo; ', '<pre><div class=\"hljs\"><code class=\"lang-java\">     * user转换为loginVo\n     * <span class=\"hljs-meta\">@param</span> sysUser\n     * <span class=\"hljs-meta\">@return</span>\n     */\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> LoginVo <span class=\"hljs-title\">userToLoginVo</span><span class=\"hljs-params\">(SysUser sysUser)</span> </span>{\n        LoginVo loginVo =<span class=\"hljs-keyword\">new</span> LoginVo();\n        BeanUtils.copyProperties(sysUser, loginVo);\n        <span class=\"hljs-keyword\">return</span> loginVo; </code></div></pre>\n', 1468231964523352066);
INSERT INTO `ms_article_body` VALUES (1468473952807997441, '李博猛牛逼之路\n\n哈哈哈哈哈哈', '<p>李博猛牛逼之路</p>\n<p>哈哈哈哈哈哈</p>\n', 1468473952799608834);
INSERT INTO `ms_article_body` VALUES (1468562564547375106, '1111', '<p>1111</p>\n', 1468562564480266241);
INSERT INTO `ms_article_body` VALUES (1468562816851628034, '## 1111', '<h2><a id=\"1111_0\"></a>1111</h2>\n', 1468562816797102082);
INSERT INTO `ms_article_body` VALUES (1469349701626671105, '测试', '<p>测试</p>\n', 1469349701563756546);
INSERT INTO `ms_article_body` VALUES (1469350256159858689, '开始测试', '<p>开始测试</p>\n', 1469350256096944130);
INSERT INTO `ms_article_body` VALUES (1469574735607697410, '新文章来拉', '<p>新文章来拉</p>\n', 1469574735540588545);
INSERT INTO `ms_article_body` VALUES (1469578376552980481, '文章', '<p>文章</p>\n', 1469578376494260225);
INSERT INTO `ms_article_body` VALUES (1469579087810510850, '0507', '<p>0507</p>\n', 1469579087743401985);
INSERT INTO `ms_article_body` VALUES (1471856156936065027, '### 【调错日记】Dependency ‘com.alibaba:fastjson:not found\n\n今天在写新项目时，导入fastjson依赖时一直爆红\n\n~~~ xml\n<dependency>\n 	<groupId>com.alibaba</groupId>\n 	<artifactId>fastjson</artifactId>\n  	 <version>1.2.76</version>\n </dependency>\n~~~\n\n\n\n之前一直都是一次成功导入，完全没有处理经验。网上搜索的方法大多都是:\n\n* **从新加载工程；**\n\n* **网络原因；**\n\n* **本地仓库依赖破损，需要从新下载；**\n* ......\n\n​		全部都试过一个有用的都没有\n\n点开**fastjson**父依赖\n\n![image-20211217210601181](https://gitee.com/lbmc/imagehost/raw/master/img/image-20211217210601181.png)\n\n**新版本的fastjson居然要求maven 3.8.0以上!**\n\n\n\nIDEA2021.2版本中，maven默认只给到3.6.3版本.手动到maven官网下载最新版本：https://maven.apache.org/download.cgi\n\n![image-20211217213043496](https://gitee.com/lbmc/imagehost/raw/master/img/image-20211217213043496.png)\n\n\n\n下载新版本后在IEDA指定maven为刚刚下载好的版本，apply完美解决\n\n![image-20211217212943386](https://gitee.com/lbmc/imagehost/raw/master/img/image-20211217212943386.png)\n\n', '<h3><a id=\"Dependency_comalibabafastjsonnot_found_0\"></a>【调错日记】Dependency ‘com.alibaba:fastjson:not found</h3>\n<p>今天在写新项目时，导入fastjson依赖时一直爆红</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n 	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n 	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>fastjson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n  	 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.2.76<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></div></pre>\n<p>之前一直都是一次成功导入，完全没有处理经验。网上搜索的方法大多都是:</p>\n<ul>\n<li>\n<p><strong>从新加载工程；</strong></p>\n</li>\n<li>\n<p><strong>网络原因；</strong></p>\n</li>\n<li>\n<p><strong>本地仓库依赖破损，需要从新下载；</strong></p>\n</li>\n<li>\n<p>…</p>\n</li>\n</ul>\n<p>​		全部都试过一个有用的都没有</p>\n<p>点开<strong>fastjson</strong>父依赖</p>\n<p><img src=\"https://gitee.com/lbmc/imagehost/raw/master/img/image-20211217210601181.png\" alt=\"image-20211217210601181\" /></p>\n<p><strong>新版本的fastjson居然要求maven 3.8.0以上!</strong></p>\n<p>IDEA2021.2版本中，maven默认只给到3.6.3版本.手动到maven官网下载最新版本：https://maven.apache.org/download.cgi</p>\n<p><img src=\"https://gitee.com/lbmc/imagehost/raw/master/img/image-20211217213043496.png\" alt=\"image-20211217213043496\" /></p>\n<p>下载新版本后在IEDA指定maven为刚刚下载好的版本，apply完美解决</p>\n<p><img src=\"https://gitee.com/lbmc/imagehost/raw/master/img/image-20211217212943386.png\" alt=\"image-20211217212943386\" /></p>\n', 1471856156936065026);
INSERT INTO `ms_article_body` VALUES (1472928310499028994, '# 手把手教你Docker+nginx部署Springboot+vue前后端分离项目\n\n配套视频：https://www.bilibili.com/video/BV17A411E7aE/\n\n------\n\n### 项目回顾\n其实我觉得我已经录制得很详细的了，可能大家水平不一，有些人觉得我很多地方讲清楚，还有就是有些人按照视频同步做实验，还一路踩坑，这个我也预料不到哈哈。说实话，我自己做实验的过程还是挺顺利的。\n\n有些同学们提出个问题，不知道如何打包部署Vue前后端分离项目。那么今天，我们就来学习一下，如何部署简单快捷部署我们的vueblog项目！\n\n**这里给出vueblog项目的视频地址：**\n\n名称：[实战]基于SpringBoot+Vue开发的前后端分离博客项目完整教学（vueblog）\n\n视频：https://www.bilibili.com/video/BV1PQ4y1P7hZ/\n\n文档：https://juejin.im/post/6844903823966732302\n\n线上演示：http://www.markerhub.com:8084/blogs\n\n### 配套部署视频\n\n- 视频：https://www.bilibili.com/video/BV17A411E7aE/\n- 文档：https://juejin.im/post/6886061338804617229/\n\n### 工具\n\n- xshell 6 绿色破解版：关注公众号：**JavaCat**，回复**xshell**获取\n\n- Navicat 11 简体中文版：关注公众号：\n\n  JavaCat\n\n  ，回复\n\n  navicat\n\n  获取\n\n  ### 上线前准备\n\n这里我们同步演示怎么部署到win环境和linux（centos7）系统中，前端服务器采用nginx部署，并使用docker统一管理前后端服务器。\n\n所以我们会用到：\n\n- nginx\n- docker compose\n\n希望你看视频前有点基础哈，当然了，这次部署比较简单，不需要很精通，一般看了我的视频应该都能部署成功的哈。\n\n话不多说，直接上手！别忘了给我一个一键三联哈，顺便关注我B站，感谢！\n\n### 1、win环境\n\nwin环境我就用本机来演示了，我们需要分别打包前后端，前后端打包都是一条命令即可，只不过我们打包之前注意需要配置好线上的环境参数等。\n\n#### 1.1、前端\n\n先来配置一下后端的调用路径，因为现在部署在本地localhost，所以在axios.js中，我们配置好链接，因为等下后端部署也是本机，所以我这里直接这样配置就好了，如下：\n\n- src\\axios.js\n\n  ```plain\n  axios.defaults.baseURL = \"http://localhost:8081\"\n  ```\n\n  上面配置的就是前端访问后端接口的服务。\n  然后前端部署还需要考虑一个问题：打包之后项目资源引用路径，比如我们打包后链接是否需要带项目名称等。按照Vue官方的部署说明，我们添加一个**vue.config.js**文件，\n\n- vueblog-vue/vue.config.js\n\n  ```plain\n  module.exports = {\n  publicPath: \'/\'\n  }\n  ```\n\n  当然了，publicPath默认其实是空的，也就是publicPath: ‘’，两个效果貌似其实是一样的，哈哈哈，我只是提醒一下有这回事而已，嘿嘿。\n  设置完毕之后，我们执行打包命令：\n\n```plain\n# 打包命令\nnpm run build\n```\n\n命令执行之后，我们在项目根目录下就可以找到一个dist的目录，这个就是打包之后的文件夹，里面有个index.html，但是我们点击直接打开是看不到任何内容的，这时候，我们需要部署到nginx中。\n![图片](https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/e6f843e72b754170979ff89d30fa4ddc.png)\n\n首先我们下载一个nginx，下载地址：http://nginx.org/en/download.html，这里我们下载nginx/Windows-1.18.0版本，下载之后解压zip。根据我们对nginx的熟悉，静态文件我们放在html文件夹下面，所以先把html文件夹中的index.html和50x.html删掉，然后把打包出来的dist文件夹内的所有文件都复制到nginx的html中，如图：\n\n![图片](https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/b9c6f2e4f249418aaac8fb9b1cf76db9.png)\n\n双击nginx.exe启动nginx，然后浏览器输入[http://localhost](http://localhost/)，出现了我们熟悉的界面，虽然没有博客数据，链接也自动跳转到了http://localhost/blogs，\n\n![图片](https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/f62108a4241e4b22a8efb9f9db89e963.png)\n\n我们点击任意一个链接或者按钮或者刷新界面，这时候出现了404：\n\n![图片](https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/7854f0f0b97747368331c6de57299f0a.png)\n\n刷新之后nginx就找不到路由了，这是为啥，得和你们科普一下，vue项目的入口是index.html文件，nginx路由的时候都必须要先经过这个文件，所以我们得给nginx定义一下规则，让它匹配不到资源路径的时候，先去读取index.html，然后再路由。所以我们配置一下nginx.conf文件。具体操作就是找到**location /**,添加上一行代码**try_files $uri $uri/ /index.html last**;如下：\n\n- nginx-1.18.0/conf/nginx.conf\n\n  ```plain\n  location / {\n    root   html;\n    try_files $uri $uri/ /index.html last;\n    index  index.html index.htm;\n  }\n  ```\n\n  这一行代码是什么意思呢？\n\n  try_files的语法规则： 格式1：try_files file … uri，表示按指定的file顺序查找存在的文件，并使用第一个找到的文件进行请求处理，last表示匹配不到就内部直接匹配最后一个。\n\n重启nginx之后，链接再刷新都正常啦。但是没有数据，所以我们去部署一下后端。windows环境nginx的重启我一般都是打开任务管理器直接干掉nginx进程，然后再重新双击的~~\n\n![图片](https://gitee.com/lbmc/imagehost/raw/master/img/a1b0e6cb51fe4e57a8acc2b5ae252d5e.png)\n\n#### 1.2、后端\n\n后端的打包就简单多了，应该大家都挺熟悉的，注意配置redis、mysql的链接密码啥的，然后执行命令，本机测试，redis和mysql我都已经提前安装好的了，sql文件也在vueblog-java的resources目录下。\n\n对了，pom.xml文件里面，spring-boot-maven-plugin之前注释掉了，现在一定要打开。不然执行jar会找不到主类。\n\n- pom.xml\n\n![图片](https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/acf52fdbf43b4094816461fe490cf946.png)\n\n执行打包命令：\n\n```plain\n# 跳过测试打包\nmvn clean package -Dmaven.test.skip=true\n```\n\n得到target下的vueblog-0.0.1-SNAPSHOT.jar，然后再执行命令\n\n```plain\njava -jar vueblog-0.0.1-SNAPSHOT.jar --spring.profiles.active=default\n```\n\n后端上线之后，我们再访问下前端，发现已经可以正常浏览网页啦！spring.profiles.active表示指定环境配置文件。\n![图片](https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/7349025903a2439ba475a758f91935c8.png)\n\n### 2、linux环境\n\nlinux环境部署相对复杂一点，因为我们还要部署redis、mysql等。之前我发布过一个视频，是部署传统的博客项目eblog，采用的是docker容器，但是我们没有docker compose进行编排，这次我们使用docker compose来编排我们的服务，一起性搞定部署。\n\n二话不说，我们先来安装一下docker和docker compose，对于docker知识还不是特别懂的同学，建议自行去补习补习哈。\n\n#### 2.1、安装docker\n\n```plain\n#更新yum\n sudo yum update\n#安装\nyum install docker\n#检验安装是否成功\n[root@localhost opt]# \nDocker version 1.13.1, build 7f2769b/1.13.1\n#启动\nsystemctl start docker\n```\n\n#### 2.2、安装docker compose\n\n可以参考：https://docs.docker.com/compose/install/\n\n```plain\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n#\nsudo chmod +x /usr/local/bin/docker-compose\n# 检查是否安装成功\ndocker-compose --version\n```\n\n#### 2.3、编写Dockerfile文件\n\n因为我们的项目需要成为docker的镜像，所以我们必须先编写Dockerfile文件构建我们的项目镜像然后进行编排，Dockerfile文件可以帮我们进行构建。\n\n- Dockerfile\n\n  ```plain\n  FROM java:8\n  EXPOSE 8080\n  ADD vueblog-0.0.1-SNAPSHOT.jar app.jar\n  RUN bash -c \'touch /app.jar\'\n  ENTRYPOINT [\"java\", \"-jar\", \"/app.jar\", \"--spring.profiles.active=pro\"]\n  ```\n\n  上面几行命令其实很简单，首先依赖jdk8环境，对外暴露8080，然后就是复制vueblog-0.0.1-SNAPSHOT.jar到docker容器中并命名为app.jar，最后是执行命令\n\n  java -jar /app.jar —spring.profiles.active=pro\n\n  ，使用的是我们另外编写的一个线上环境配置。\n\n- application-pro.yml\n\n  ```plain\n  # DataSource Config\n  spring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc//localhost:3306/vueblog?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=Asia/Shanghai\n    username: root\n    password: admin\n  shiro-redis:\n  enabled: true\n  redis-manager:\n    host: 127.0.0.1:6379\n  ```\n\n  等会儿我们需要修改application-pro.yml的redis和mysql链接等信息的一些配置，需要注意。\n\n#### 2.4、编写docker-compose.yml文件\n\n我们需要用到的软件与服务分别有nginx、mysql、redis、还有我们的springboot项目，所以编写如下：\n\n- docker-compose.yml\n\n  ```plain\n  version: \"3\"\n  services:\n  nginx: # 服务名称，用户自定义\n    image: nginx:latest  # 镜像版本\n    ports:\n    - 80:80  # 暴露端口\n    volumes: # 挂载\n    - /root/nginx/html:/usr/share/nginx/html\n    - /root/nginx/nginx.conf:/etc/nginx/nginx.conf\n    privileged: true # 这个必须要，解决nginx的文件调用的权限问题\n  mysql:\n    image: mysql:5.7.27\n    ports:\n    - 3306:3306\n    environment: # 指定用户root的密码\n      - MYSQL_ROOT_PASSWORD=admin\n  redis:\n    image: redis:latest\n  vueblog:\n    image: vueblog:latest\n    build: . # 表示以当前目录下的Dockerfile开始构建镜像\n    ports:\n    - 8081:8081\n    depends_on: # 依赖与mysql、redis，其实可以不填，默认已经表示可以\n      - mysql\n      - redis\n  ```\n\n  上面的意思，我都用注释解释一遍了，希望可以讲清楚！需要注意的是，nginx中我们对nginx的放置静态资源的html文件夹和配置文件nginx.conf进行了一个挂载，所以我们打包后的文件放置到宿主机\n\n  /root/nginx/html\n\n  文件目录就行了哈\n\n  #### 2.5、修改application-pro.yml\n\n然后我们再回头看看application-pro.yml文件，mysql和redis的链接之前还是localhost，现在我们需要修改成容器之间的调用，如何知道mysql和redis的链接地址呢？docker compose就帮我们解决了这个问题，我们可以使用镜像容器的服务名称来表示链接。比如docker-compose.yml中mysql的服务名称就叫mysql、redis就叫redis。\n\n![图片](https://gitee.com/lbmc/imagehost/raw/master/img/dbd9201e9a64423582e245a9d0d001cf.png)\n\n所以我们最终得到的配置文件如下：\n\n![图片](https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/28a935f2f8854759bead5d5ca62a2a11.png)\n\n#### 2.6、准备好nginx的挂载目录和配置\n\ndocker-compose.yml中已经提到，\n\n- 宿主机的挂载目录：/root/nginx/html\n- 挂载配置：/root/nginx/nginx.conf\n\n所以我们在root目录下新建nginx目录，并进入nginx目录下新建html目录和一个nginx.conf配置文件。\n\n![图片](https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/f2d055c3ecf944108f28bdc4f2daf38e.png)\n\n然后对nginx.conf进行编写，具体配置如下：\n\n- nginx.conf\n\n  ```plain\n  #user  root;\n  worker_processes  1;\n  events {\n    worker_connections  1024;\n  }\n  http {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    server {\n        listen       80;\n        server_name  localhost;\n        location / {\n            root   /usr/share/nginx/html;\n            try_files $uri $uri/ /index.html last; # 别忘了这个哈\n            index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n  }\n  ```\n\n  #### 2.7、上传前端\n\n前端打包之后先修改前端调用后端的接口，因为我是虚拟机，所以配置如下：\n\n- axios.js\n\n  ```plain\n  axios.defaults.baseURL = \"http://192.168.0.117:8081\"\n  ```\n\n  然后\n\n  npm run build\n\n  打包得到\n\n  dist\n\n  文件夹，并把dist压缩成dist.zip上传到linux之后解压到\n\n  /root/nginx/html\n\n  目录下。如下图：\n\n![图片](https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/4a30914758cf4e2f84548d7631980960.png)\n\n#### 2.8、部署后端\n\n一切准备就绪之后，我们就开始编排部署了哈。\n\n首先本地打包vueblog项目，vueblog-0.0.1-SNAPSHOT.jar，并上传到linux中，同时docker-compose.yml、Dockerfile也上传到同一目录下。如图所示：\n\n![图片](https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/35413954bd1a4fc78823e26f9a2ff2a6.png)\n\n然后我们执行一下编排命令:\n\n```plain\n# 开始编排\ncd ~\ndocker-compose up -d\n```\n\n其中-d表示后台服务形式启动\n![图片](https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/fd9b5b1103ff408b8a7aaae79116df25.png)\n\n然后我们稍等片刻，特别是开始**Building vueblog**的时候可能时间有点长，耐心等待即可！\n\n最后提示如下：\n\n![图片](https://gitee.com/lbmc/imagehost/raw/master/img/919cf60d670f43198c8c3f43d512fa89.png)\n\n说明我们已经成功编排啦。\n\nnginx是80端口，所以我们直接输入ip地址，如下可以看到一个界面然后有弹窗：\n\n![图片](https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/a32711d1d1e94ee7ad702c7bb064a4f5.png)\n\n这个简单，是因为我们的数据库还没创建哈。接下来我们去手动创建一下数据库并导入sql文件。\n\n- vueblog-java/src/main/resources/vueblog.sql\n\n![图片](https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/963212f8ddd241b2ba7b6af4152e0572.png)\n\n然后再刷新一下浏览器链接，数据就出来啦，搞定，轻松！\n\n![图片](https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/5a9d24b5b4bb482aa8d6400fc8b969c7.png)\n\n### 3.删除所有容器镜像\n\n~~~ docker system prune -a\n    docker system prune -a\n~~~\n\n### 3、结束语\n\n好啦，部署完毕，别忘了一键三联，关注我的B站MarkerHub，公众同名，哈哈。\n\n关注公众号 JavaCat ，回复关键字**前后端部署**，获取本文档！\n\n视频讲解：https://www.bilibili.com/video/BV17A411E7aE/\n\n ', '<h1><a id=\"DockernginxSpringbootvue_0\"></a>手把手教你Docker+nginx部署Springboot+vue前后端分离项目</h1>\n<p>配套视频：https://www.bilibili.com/video/BV17A411E7aE/</p>\n<hr />\n<h3><a id=\"_6\"></a>项目回顾</h3>\n<p>其实我觉得我已经录制得很详细的了，可能大家水平不一，有些人觉得我很多地方讲清楚，还有就是有些人按照视频同步做实验，还一路踩坑，这个我也预料不到哈哈。说实话，我自己做实验的过程还是挺顺利的。</p>\n<p>有些同学们提出个问题，不知道如何打包部署Vue前后端分离项目。那么今天，我们就来学习一下，如何部署简单快捷部署我们的vueblog项目！</p>\n<p><strong>这里给出vueblog项目的视频地址：</strong></p>\n<p>名称：[实战]基于SpringBoot+Vue开发的前后端分离博客项目完整教学（vueblog）</p>\n<p>视频：https://www.bilibili.com/video/BV1PQ4y1P7hZ/</p>\n<p>文档：https://juejin.im/post/6844903823966732302</p>\n<p>线上演示：http://www.markerhub.com:8084/blogs</p>\n<h3><a id=\"_21\"></a>配套部署视频</h3>\n<ul>\n<li>视频：https://www.bilibili.com/video/BV17A411E7aE/</li>\n<li>文档：https://juejin.im/post/6886061338804617229/</li>\n</ul>\n<h3><a id=\"_26\"></a>工具</h3>\n<ul>\n<li>\n<p>xshell 6 绿色破解版：关注公众号：<strong>JavaCat</strong>，回复<strong>xshell</strong>获取</p>\n</li>\n<li>\n<p>Navicat 11 简体中文版：关注公众号：</p>\n<p>JavaCat</p>\n<p>，回复</p>\n<p>navicat</p>\n<p>获取</p>\n<h3><a id=\"_40\"></a>上线前准备</h3>\n</li>\n</ul>\n<p>这里我们同步演示怎么部署到win环境和linux（centos7）系统中，前端服务器采用nginx部署，并使用docker统一管理前后端服务器。</p>\n<p>所以我们会用到：</p>\n<ul>\n<li>nginx</li>\n<li>docker compose</li>\n</ul>\n<p>希望你看视频前有点基础哈，当然了，这次部署比较简单，不需要很精通，一般看了我的视频应该都能部署成功的哈。</p>\n<p>话不多说，直接上手！别忘了给我一个一键三联哈，顺便关注我B站，感谢！</p>\n<h3><a id=\"1win_53\"></a>1、win环境</h3>\n<p>win环境我就用本机来演示了，我们需要分别打包前后端，前后端打包都是一条命令即可，只不过我们打包之前注意需要配置好线上的环境参数等。</p>\n<h4><a id=\"11_57\"></a>1.1、前端</h4>\n<p>先来配置一下后端的调用路径，因为现在部署在本地localhost，所以在axios.js中，我们配置好链接，因为等下后端部署也是本机，所以我这里直接这样配置就好了，如下：</p>\n<ul>\n<li>\n<p>src\\axios.js</p>\n<pre><code class=\"lang-plain\">axios.defaults.baseURL = &quot;http://localhost:8081&quot;\n</code></pre>\n<p>上面配置的就是前端访问后端接口的服务。<br />\n然后前端部署还需要考虑一个问题：打包之后项目资源引用路径，比如我们打包后链接是否需要带项目名称等。按照Vue官方的部署说明，我们添加一个<strong>vue.config.js</strong>文件，</p>\n</li>\n<li>\n<p>vueblog-vue/vue.config.js</p>\n<pre><code class=\"lang-plain\">module.exports = {\npublicPath: \'/\'\n}\n</code></pre>\n<p>当然了，publicPath默认其实是空的，也就是publicPath: ‘’，两个效果貌似其实是一样的，哈哈哈，我只是提醒一下有这回事而已，嘿嘿。<br />\n设置完毕之后，我们执行打包命令：</p>\n</li>\n</ul>\n<pre><code class=\"lang-plain\"># 打包命令\nnpm run build\n</code></pre>\n<p>命令执行之后，我们在项目根目录下就可以找到一个dist的目录，这个就是打包之后的文件夹，里面有个index.html，但是我们点击直接打开是看不到任何内容的，这时候，我们需要部署到nginx中。<br />\n<img src=\"https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/e6f843e72b754170979ff89d30fa4ddc.png\" alt=\"图片\" /></p>\n<p>首先我们下载一个nginx，下载地址：http://nginx.org/en/download.html，这里我们下载nginx/Windows-1.18.0版本，下载之后解压zip。根据我们对nginx的熟悉，静态文件我们放在html文件夹下面，所以先把html文件夹中的index.html和50x.html删掉，然后把打包出来的dist文件夹内的所有文件都复制到nginx的html中，如图：</p>\n<p><img src=\"https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/b9c6f2e4f249418aaac8fb9b1cf76db9.png\" alt=\"图片\" /></p>\n<p>双击nginx.exe启动nginx，然后浏览器输入<a href=\"http://localhost/\" target=\"_blank\">http://localhost</a>，出现了我们熟悉的界面，虽然没有博客数据，链接也自动跳转到了http://localhost/blogs，</p>\n<p><img src=\"https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/f62108a4241e4b22a8efb9f9db89e963.png\" alt=\"图片\" /></p>\n<p>我们点击任意一个链接或者按钮或者刷新界面，这时候出现了404：</p>\n<p><img src=\"https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/7854f0f0b97747368331c6de57299f0a.png\" alt=\"图片\" /></p>\n<p>刷新之后nginx就找不到路由了，这是为啥，得和你们科普一下，vue项目的入口是index.html文件，nginx路由的时候都必须要先经过这个文件，所以我们得给nginx定义一下规则，让它匹配不到资源路径的时候，先去读取index.html，然后再路由。所以我们配置一下nginx.conf文件。具体操作就是找到<strong>location /</strong>,添加上一行代码<strong>try_files $uri $uri/ /index.html last</strong>;如下：</p>\n<ul>\n<li>\n<p>nginx-1.18.0/conf/nginx.conf</p>\n<pre><code class=\"lang-plain\">location / {\n  root   html;\n  try_files $uri $uri/ /index.html last;\n  index  index.html index.htm;\n}\n</code></pre>\n<p>这一行代码是什么意思呢？</p>\n<p>try_files的语法规则： 格式1：try_files file … uri，表示按指定的file顺序查找存在的文件，并使用第一个找到的文件进行请求处理，last表示匹配不到就内部直接匹配最后一个。</p>\n</li>\n</ul>\n<p>重启nginx之后，链接再刷新都正常啦。但是没有数据，所以我们去部署一下后端。windows环境nginx的重启我一般都是打开任务管理器直接干掉nginx进程，然后再重新双击的~~</p>\n<p><img src=\"https://gitee.com/lbmc/imagehost/raw/master/img/a1b0e6cb51fe4e57a8acc2b5ae252d5e.png\" alt=\"图片\" /></p>\n<h4><a id=\"12_121\"></a>1.2、后端</h4>\n<p>后端的打包就简单多了，应该大家都挺熟悉的，注意配置redis、mysql的链接密码啥的，然后执行命令，本机测试，redis和mysql我都已经提前安装好的了，sql文件也在vueblog-java的resources目录下。</p>\n<p>对了，pom.xml文件里面，spring-boot-maven-plugin之前注释掉了，现在一定要打开。不然执行jar会找不到主类。</p>\n<ul>\n<li>pom.xml</li>\n</ul>\n<p><img src=\"https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/acf52fdbf43b4094816461fe490cf946.png\" alt=\"图片\" /></p>\n<p>执行打包命令：</p>\n<pre><code class=\"lang-plain\"># 跳过测试打包\nmvn clean package -Dmaven.test.skip=true\n</code></pre>\n<p>得到target下的vueblog-0.0.1-SNAPSHOT.jar，然后再执行命令</p>\n<pre><code class=\"lang-plain\">java -jar vueblog-0.0.1-SNAPSHOT.jar --spring.profiles.active=default\n</code></pre>\n<p>后端上线之后，我们再访问下前端，发现已经可以正常浏览网页啦！spring.profiles.active表示指定环境配置文件。<br />\n<img src=\"https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/7349025903a2439ba475a758f91935c8.png\" alt=\"图片\" /></p>\n<h3><a id=\"2linux_147\"></a>2、linux环境</h3>\n<p>linux环境部署相对复杂一点，因为我们还要部署redis、mysql等。之前我发布过一个视频，是部署传统的博客项目eblog，采用的是docker容器，但是我们没有docker compose进行编排，这次我们使用docker compose来编排我们的服务，一起性搞定部署。</p>\n<p>二话不说，我们先来安装一下docker和docker compose，对于docker知识还不是特别懂的同学，建议自行去补习补习哈。</p>\n<h4><a id=\"21docker_153\"></a>2.1、安装docker</h4>\n<pre><code class=\"lang-plain\">#更新yum\n sudo yum update\n#安装\nyum install docker\n#检验安装是否成功\n[root@localhost opt]# \nDocker version 1.13.1, build 7f2769b/1.13.1\n#启动\nsystemctl start docker\n</code></pre>\n<h4><a id=\"22docker_compose_167\"></a>2.2、安装docker compose</h4>\n<p>可以参考：https://docs.docker.com/compose/install/</p>\n<pre><code class=\"lang-plain\">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose\n#\nsudo chmod +x /usr/local/bin/docker-compose\n# 检查是否安装成功\ndocker-compose --version\n</code></pre>\n<h4><a id=\"23Dockerfile_179\"></a>2.3、编写Dockerfile文件</h4>\n<p>因为我们的项目需要成为docker的镜像，所以我们必须先编写Dockerfile文件构建我们的项目镜像然后进行编排，Dockerfile文件可以帮我们进行构建。</p>\n<ul>\n<li>\n<p>Dockerfile</p>\n<pre><code class=\"lang-plain\">FROM java:8\nEXPOSE 8080\nADD vueblog-0.0.1-SNAPSHOT.jar app.jar\nRUN bash -c \'touch /app.jar\'\nENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;, &quot;--spring.profiles.active=pro&quot;]\n</code></pre>\n<p>上面几行命令其实很简单，首先依赖jdk8环境，对外暴露8080，然后就是复制vueblog-0.0.1-SNAPSHOT.jar到docker容器中并命名为app.jar，最后是执行命令</p>\n<p>java -jar /app.jar —spring.profiles.active=pro</p>\n<p>，使用的是我们另外编写的一个线上环境配置。</p>\n</li>\n<li>\n<p>application-pro.yml</p>\n<pre><code class=\"lang-plain\"># DataSource Config\nspring:\ndatasource:\n  driver-class-name: com.mysql.cj.jdbc.Driver\n  url: jdbc//localhost:3306/vueblog?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai\n  username: root\n  password: admin\nshiro-redis:\nenabled: true\nredis-manager:\n  host: 127.0.0.1:6379\n</code></pre>\n<p>等会儿我们需要修改application-pro.yml的redis和mysql链接等信息的一些配置，需要注意。</p>\n</li>\n</ul>\n<h4><a id=\"24dockercomposeyml_217\"></a>2.4、编写docker-compose.yml文件</h4>\n<p>我们需要用到的软件与服务分别有nginx、mysql、redis、还有我们的springboot项目，所以编写如下：</p>\n<ul>\n<li>\n<p>docker-compose.yml</p>\n<pre><code class=\"lang-plain\">version: &quot;3&quot;\nservices:\nnginx: # 服务名称，用户自定义\n  image: nginx:latest  # 镜像版本\n  ports:\n  - 80:80  # 暴露端口\n  volumes: # 挂载\n  - /root/nginx/html:/usr/share/nginx/html\n  - /root/nginx/nginx.conf:/etc/nginx/nginx.conf\n  privileged: true # 这个必须要，解决nginx的文件调用的权限问题\nmysql:\n  image: mysql:5.7.27\n  ports:\n  - 3306:3306\n  environment: # 指定用户root的密码\n    - MYSQL_ROOT_PASSWORD=admin\nredis:\n  image: redis:latest\nvueblog:\n  image: vueblog:latest\n  build: . # 表示以当前目录下的Dockerfile开始构建镜像\n  ports:\n  - 8081:8081\n  depends_on: # 依赖与mysql、redis，其实可以不填，默认已经表示可以\n    - mysql\n    - redis\n</code></pre>\n<p>上面的意思，我都用注释解释一遍了，希望可以讲清楚！需要注意的是，nginx中我们对nginx的放置静态资源的html文件夹和配置文件nginx.conf进行了一个挂载，所以我们打包后的文件放置到宿主机</p>\n<p>/root/nginx/html</p>\n<p>文件目录就行了哈</p>\n<h4><a id=\"25applicationproyml_258\"></a>2.5、修改application-pro.yml</h4>\n</li>\n</ul>\n<p>然后我们再回头看看application-pro.yml文件，mysql和redis的链接之前还是localhost，现在我们需要修改成容器之间的调用，如何知道mysql和redis的链接地址呢？docker compose就帮我们解决了这个问题，我们可以使用镜像容器的服务名称来表示链接。比如docker-compose.yml中mysql的服务名称就叫mysql、redis就叫redis。</p>\n<p><img src=\"https://gitee.com/lbmc/imagehost/raw/master/img/dbd9201e9a64423582e245a9d0d001cf.png\" alt=\"图片\" /></p>\n<p>所以我们最终得到的配置文件如下：</p>\n<p><img src=\"https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/28a935f2f8854759bead5d5ca62a2a11.png\" alt=\"图片\" /></p>\n<h4><a id=\"26nginx_268\"></a>2.6、准备好nginx的挂载目录和配置</h4>\n<p>docker-compose.yml中已经提到，</p>\n<ul>\n<li>宿主机的挂载目录：/root/nginx/html</li>\n<li>挂载配置：/root/nginx/nginx.conf</li>\n</ul>\n<p>所以我们在root目录下新建nginx目录，并进入nginx目录下新建html目录和一个nginx.conf配置文件。</p>\n<p><img src=\"https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/f2d055c3ecf944108f28bdc4f2daf38e.png\" alt=\"图片\" /></p>\n<p>然后对nginx.conf进行编写，具体配置如下：</p>\n<ul>\n<li>\n<p>nginx.conf</p>\n<pre><code class=\"lang-plain\">#user  root;\nworker_processes  1;\nevents {\n  worker_connections  1024;\n}\nhttp {\n  include       mime.types;\n  default_type  application/octet-stream;\n  sendfile        on;\n  keepalive_timeout  65;\n  server {\n      listen       80;\n      server_name  localhost;\n      location / {\n          root   /usr/share/nginx/html;\n          try_files $uri $uri/ /index.html last; # 别忘了这个哈\n          index  index.html index.htm;\n      }\n      error_page   500 502 503 504  /50x.html;\n      location = /50x.html {\n          root   html;\n      }\n  }\n}\n</code></pre>\n<h4><a id=\"27_310\"></a>2.7、上传前端</h4>\n</li>\n</ul>\n<p>前端打包之后先修改前端调用后端的接口，因为我是虚拟机，所以配置如下：</p>\n<ul>\n<li>\n<p>axios.js</p>\n<pre><code class=\"lang-plain\">axios.defaults.baseURL = &quot;http://192.168.0.117:8081&quot;\n</code></pre>\n<p>然后</p>\n<p>npm run build</p>\n<p>打包得到</p>\n<p>dist</p>\n<p>文件夹，并把dist压缩成dist.zip上传到linux之后解压到</p>\n<p>/root/nginx/html</p>\n<p>目录下。如下图：</p>\n</li>\n</ul>\n<p><img src=\"https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/4a30914758cf4e2f84548d7631980960.png\" alt=\"图片\" /></p>\n<h4><a id=\"28_336\"></a>2.8、部署后端</h4>\n<p>一切准备就绪之后，我们就开始编排部署了哈。</p>\n<p>首先本地打包vueblog项目，vueblog-0.0.1-SNAPSHOT.jar，并上传到linux中，同时docker-compose.yml、Dockerfile也上传到同一目录下。如图所示：</p>\n<p><img src=\"https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/35413954bd1a4fc78823e26f9a2ff2a6.png\" alt=\"图片\" /></p>\n<p>然后我们执行一下编排命令:</p>\n<pre><code class=\"lang-plain\"># 开始编排\ncd ~\ndocker-compose up -d\n</code></pre>\n<p>其中-d表示后台服务形式启动<br />\n<img src=\"https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/fd9b5b1103ff408b8a7aaae79116df25.png\" alt=\"图片\" /></p>\n<p>然后我们稍等片刻，特别是开始<strong>Building vueblog</strong>的时候可能时间有点长，耐心等待即可！</p>\n<p>最后提示如下：</p>\n<p><img src=\"https://gitee.com/lbmc/imagehost/raw/master/img/919cf60d670f43198c8c3f43d512fa89.png\" alt=\"图片\" /></p>\n<p>说明我们已经成功编排啦。</p>\n<p>nginx是80端口，所以我们直接输入ip地址，如下可以看到一个界面然后有弹窗：</p>\n<p><img src=\"https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/a32711d1d1e94ee7ad702c7bb064a4f5.png\" alt=\"图片\" /></p>\n<p>这个简单，是因为我们的数据库还没创建哈。接下来我们去手动创建一下数据库并导入sql文件。</p>\n<ul>\n<li>vueblog-java/src/main/resources/vueblog.sql</li>\n</ul>\n<p><img src=\"https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/963212f8ddd241b2ba7b6af4152e0572.png\" alt=\"图片\" /></p>\n<p>然后再刷新一下浏览器链接，数据就出来啦，搞定，轻松！</p>\n<p><img src=\"https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201021/5a9d24b5b4bb482aa8d6400fc8b969c7.png\" alt=\"图片\" /></p>\n<h3><a id=\"3_377\"></a>3.删除所有容器镜像</h3>\n<pre><code class=\"lang-docker\">    docker system prune -a\n</code></pre>\n<h3><a id=\"3_383\"></a>3、结束语</h3>\n<p>好啦，部署完毕，别忘了一键三联，关注我的B站MarkerHub，公众同名，哈哈。</p>\n<p>关注公众号 JavaCat ，回复关键字<strong>前后端部署</strong>，获取本文档！</p>\n<p>视频讲解：https://www.bilibili.com/video/BV17A411E7aE/</p>\n', 1472928309869883394);
INSERT INTO `ms_article_body` VALUES (1472932224141176834, '# 【调错日记】容器时间与宿主机系统时间不符导致数据库链接失败\n\n#### 环境：docker\n\n#### 项目：web分布式应用\n\n#### 数据库：MySQL\n\n在使用docker部署一个分布式项目时，一直链接不上数据库。在测试环境明明没有任何问题，上到生产环境却一直报错。\n\n![image-20211220170656255](https://gitee.com/lbmc/imagehost/raw/master/img/image-20211220170656255.png)\n\n\n\n**经过一轮仔细排错发现.docker里容器的时间比宿主机时间慢了几个小时**\n\n![image-20211220170727550](https://gitee.com/lbmc/imagehost/raw/master/img/image-20211220170727550.png)\n\n**查看宿主机时区：**\n\n![image-20211220170748132](https://gitee.com/lbmc/imagehost/raw/master/img/image-20211220170748132.png)\n\n可以看到容器的时间与宿主机的时间相差8小时，宿主机采用的时区为CST ,可以推断出**容器默认的时区为UTC**\n\n> （China Shanghai Time，东八区时间）\n>\n> （Coordinated Universal Time，标准时间）\n\n\n\n#### **错误原因**：由于时区不一致产生的时差，触发Mysql长时间闲置自动断连机制.\n\n\n\n> 更多关于Mysql超时原因解析：https://www.cnblogs.com/xiaoboluo768/p/6222862.html\n\n\n\n**查看默认值**：进入mysql容器后，使用date命令查看时区，果然时区为UTC\n\n![image-20211220172543131](https://gitee.com/lbmc/imagehost/raw/master/img/image-20211220172543131.png)\n\n**解决办法1：修改默认时区为CST**\n\n~~~shell\n#进入容器\ndocker exec -it 77994ee5093d /bin/bash\n\n#修改时区\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\n\n~~~\n\n**验证问题是否解决：**\n\n![image-20211220173105295](https://gitee.com/lbmc/imagehost/raw/master/img/image-20211220173105295.png)\n\n​	可以看到时区已经正确设置\n\n**解决方法2：**\n\n```shell\n1 登录mysql\nmysql -u root -p\n输入密码\n \n2 查看wait_timeou\nshow global variables like \'wait_timeout\'; \n \n3 设置\nset global wait_timeout=604800; \nset global interactive_timeout=604800;\n \n4 重启mysql\ndocker-compose restart mysql;# docker restart mysql;\n```\n\n', '<h1><a id=\"_0\"></a>【调错日记】容器时间与宿主机系统时间不符导致数据库链接失败</h1>\n<h4><a id=\"docker_2\"></a>环境：docker</h4>\n<h4><a id=\"web_4\"></a>项目：web分布式应用</h4>\n<h4><a id=\"MySQL_6\"></a>数据库：MySQL</h4>\n<p>在使用docker部署一个分布式项目时，一直链接不上数据库。在测试环境明明没有任何问题，上到生产环境却一直报错。</p>\n<p><img src=\"https://gitee.com/lbmc/imagehost/raw/master/img/image-20211220170656255.png\" alt=\"image-20211220170656255\" /></p>\n<p><strong>经过一轮仔细排错发现.docker里容器的时间比宿主机时间慢了几个小时</strong></p>\n<p><img src=\"https://gitee.com/lbmc/imagehost/raw/master/img/image-20211220170727550.png\" alt=\"image-20211220170727550\" /></p>\n<p><strong>查看宿主机时区：</strong></p>\n<p><img src=\"https://gitee.com/lbmc/imagehost/raw/master/img/image-20211220170748132.png\" alt=\"image-20211220170748132\" /></p>\n<p>可以看到容器的时间与宿主机的时间相差8小时，宿主机采用的时区为CST ,可以推断出<strong>容器默认的时区为UTC</strong></p>\n<blockquote>\n<p>（China Shanghai Time，东八区时间）</p>\n<p>（Coordinated Universal Time，标准时间）</p>\n</blockquote>\n<h4><a id=\"Mysql_30\"></a><strong>错误原因</strong>：由于时区不一致产生的时差，触发Mysql长时间闲置自动断连机制.</h4>\n<blockquote>\n<p>更多关于Mysql超时原因解析：https://www.cnblogs.com/xiaoboluo768/p/6222862.html</p>\n</blockquote>\n<p><strong>查看默认值</strong>：进入mysql容器后，使用date命令查看时区，果然时区为UTC</p>\n<p><img src=\"https://gitee.com/lbmc/imagehost/raw/master/img/image-20211220172543131.png\" alt=\"image-20211220172543131\" /></p>\n<p><strong>解决办法1：修改默认时区为CST</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\">进入容器</span>\ndocker exec -it 77994ee5093d /bin/bash\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\">修改时区</span>\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n\n\n</code></div></pre>\n<p><strong>验证问题是否解决：</strong></p>\n<p><img src=\"https://gitee.com/lbmc/imagehost/raw/master/img/image-20211220173105295.png\" alt=\"image-20211220173105295\" /></p>\n<p>​	可以看到时区已经正确设置</p>\n<p><strong>解决方法2：</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">1 登录mysql\nmysql -u root -p\n输入密码\n \n2 查看wait_timeou\nshow global variables like \'wait_timeout\'; \n \n3 设置\nset global wait_timeout=604800; \nset global interactive_timeout=604800;\n \n4 重启mysql\ndocker-compose restart mysql;# docker restart mysql;\n</code></div></pre>\n', 1472932224111816706);
INSERT INTO `ms_article_body` VALUES (1472967439488200705, '123123', '<p>123123</p>\n', 1472967438955524098);
INSERT INTO `ms_article_body` VALUES (1472968451183685633, '123', '<p>123</p>\n', 1472968450655203330);
INSERT INTO `ms_article_body` VALUES (1472970772357656577, '啊实打实', '<p>啊实打实</p>\n', 1472970771699150849);
INSERT INTO `ms_article_body` VALUES (1474394237883199489, '​		无风不起浪，万物皆有因。任何消极的社会问题背后都有多方面原理，针对XX现象，我认为主要有一下几点原因。首先，思想意识上存在偏差，其次缺乏有力措施。最后制度规范不够完善。\n\n​		正如我们所看到的，XX现象背后的原因是多层次的复杂的，但是办法总比困难多，我们要在发展中解决问题。我认为要改善这一局面，需要明确各方责任，多措并举，做实做好以下各项工作，才能针对性的解决XX问题。第一，强化意识（各级媒体，各级政府，基层干部，通过  两位一端，自媒体、走访宣讲、实地座谈等方式 做好相关主体的宣传教育培训）传递给主体正确思想意识，从问题源头去解决问题。第二，强化治理（增加相关部门治理决心，力度） 第三，完善规范（相关部门广泛调用，科学指定，充分解读，及时落实执行）。\n\n​		当然，解决XX问题不可一簇而就，需要在实现中不断探索前行，需要根据实际情况不断调整策略，因地制宜，精准施策。只要我们正视问题，精准处置，积极行动，一定能实现XX 的没要愿景', '<p>​		无风不起浪，万物皆有因。任何消极的社会问题背后都有多方面原理，针对XX现象，我认为主要有一下几点原因。首先，思想意识上存在偏差，其次缺乏有力措施。最后制度规范不够完善。</p>\n<p>​		正如我们所看到的，XX现象背后的原因是多层次的复杂的，但是办法总比困难多，我们要在发展中解决问题。我认为要改善这一局面，需要明确各方责任，多措并举，做实做好以下各项工作，才能针对性的解决XX问题。第一，强化意识（各级媒体，各级政府，基层干部，通过  两位一端，自媒体、走访宣讲、实地座谈等方式 做好相关主体的宣传教育培训）传递给主体正确思想意识，从问题源头去解决问题。第二，强化治理（增加相关部门治理决心，力度） 第三，完善规范（相关部门广泛调用，科学指定，充分解读，及时落实执行）。</p>\n<p>​		当然，解决XX问题不可一簇而就，需要在实现中不断探索前行，需要根据实际情况不断调整策略，因地制宜，精准施策。只要我们正视问题，精准处置，积极行动，一定能实现XX 的没要愿景</p>\n', 1474394237451186177);
INSERT INTO `ms_article_body` VALUES (1474394449003491329, '### 面试中的领导\n\n1.尊重领导权威\n\n2.适应领导风格\n\n3.服从领导安排\n\n4.请示领导意见\n\n5完成领导人物\n\n6.汇报工作成果\n\n\n\n### 面试中的下属（不常见）\n\n1.理解下属有苦衷\n\n2.主动解其难和蒙\n\n3.用好长处多鼓励\n\n4.以身作则常带动 \n\n\n\n### 面试中的群众\n\n1.放低姿态笑脸迎\n\n2.人民至上记心中\n\n3.情理利法解问题\n\n4.兼顾灵活守原则', '<h3><a id=\"_0\"></a>面试中的领导</h3>\n<p>1.尊重领导权威</p>\n<p>2.适应领导风格</p>\n<p>3.服从领导安排</p>\n<p>4.请示领导意见</p>\n<p>5完成领导人物</p>\n<p>6.汇报工作成果</p>\n<h3><a id=\"_16\"></a>面试中的下属（不常见）</h3>\n<p>1.理解下属有苦衷</p>\n<p>2.主动解其难和蒙</p>\n<p>3.用好长处多鼓励</p>\n<p>4.以身作则常带动</p>\n<h3><a id=\"_28\"></a>面试中的群众</h3>\n<p>1.放低姿态笑脸迎</p>\n<p>2.人民至上记心中</p>\n<p>3.情理利法解问题</p>\n<p>4.兼顾灵活守原则</p>\n', 1474394448995102722);
INSERT INTO `ms_article_body` VALUES (1474394705061556225, '### 调研题\n\n审题：目的分析→ 内容 →对象→方式\n\n答题： 准备工作 →展开调研 →总结调研成果\n\n调研题难点是在于确定调研内容\n\n#### **阐述目的和意义**\n\n#### 准备工作：\n\n​	1.成立调研小组  \n\n​	2.确定调研内容 \n\n​	3.与相关部门沟通对接 \n\n​	4.规划调研路线\n\n#### 展开工作：\n\n​	1.调研对象主体  \n\n​	2.调研对象周边 \n\n​	3.召集相关工作人员组织座谈会\n\n#### 总结调研成果：\n\n​	1.汇总调研内容 \n\n​	2.总结归纳 \n\n​	3.将调研报告呈给相关部门或者领导\n\n \n\n### 宣传题\n\n#### 阐述目的和意义\n\n#### 前期准备 \n\n​	1.成立宣传小组\n\n​	 2.政策学习 \n\n​	3.制作宣传素材 \n\n​	4.做好物资准备 \n\n​	5.资金预算 \n\n​	6.了解隔壁社区工作经验\n\n#### 展开工作\n\n​	1.线下宣传，营造氛围 标语 横幅 广播 针对化宣传\n\n​	2.线上宣传，宣传日常化，持久化\n\n​	3.活动宣传，深化效果\n\n#### 宣传成效 \n\n​	成效如何？ \n\n​	有需要改进的地方？\n\n', '<h3><a id=\"_0\"></a>调研题</h3>\n<p>审题：目的分析→ 内容 →对象→方式</p>\n<p>答题： 准备工作 →展开调研 →总结调研成果</p>\n<p>调研题难点是在于确定调研内容</p>\n<h4><a id=\"_8\"></a><strong>阐述目的和意义</strong></h4>\n<h4><a id=\"_10\"></a>准备工作：</h4>\n<p>​	1.成立调研小组</p>\n<p>​	2.确定调研内容</p>\n<p>​	3.与相关部门沟通对接</p>\n<p>​	4.规划调研路线</p>\n<h4><a id=\"_20\"></a>展开工作：</h4>\n<p>​	1.调研对象主体</p>\n<p>​	2.调研对象周边</p>\n<p>​	3.召集相关工作人员组织座谈会</p>\n<h4><a id=\"_28\"></a>总结调研成果：</h4>\n<p>​	1.汇总调研内容</p>\n<p>​	2.总结归纳</p>\n<p>​	3.将调研报告呈给相关部门或者领导</p>\n<h3><a id=\"_38\"></a>宣传题</h3>\n<h4><a id=\"_40\"></a>阐述目的和意义</h4>\n<h4><a id=\"_42\"></a>前期准备</h4>\n<p>​	1.成立宣传小组</p>\n<p>​	 2.政策学习</p>\n<p>​	3.制作宣传素材</p>\n<p>​	4.做好物资准备</p>\n<p>​	5.资金预算</p>\n<p>​	6.了解隔壁社区工作经验</p>\n<h4><a id=\"_56\"></a>展开工作</h4>\n<p>​	1.线下宣传，营造氛围 标语 横幅 广播 针对化宣传</p>\n<p>​	2.线上宣传，宣传日常化，持久化</p>\n<p>​	3.活动宣传，深化效果</p>\n<h4><a id=\"_64\"></a>宣传成效</h4>\n<p>​	成效如何？</p>\n<p>​	有需要改进的地方？</p>\n', 1474394705053167618);
INSERT INTO `ms_article_body` VALUES (1474394942190727170, '\n## 消极类社会现象题思路总结\n\n### 1.概括话题做否定\n\n### 2.联系现状做说明\n\n### 3.分析原因点问题\n\n### 4.解决问题展未来\n\n\n\n## 积极类社会现象题\n\n### 1.肯定话题，阐明意义\n\n### 2.好的原因是什么\n\n### 3.有没有不足之处\n\n### 4. 如何好上加好\n\n\n\n### 政策行为题\n\n#### 1.概括政策的目的和意义\n\n#### 2.分析政策合理必要性\n\n#### 3.点出可能存在的问题\n\n#### 4.提出解决优化的对策\n\n\n\n', '<h2><a id=\"_1\"></a>消极类社会现象题思路总结</h2>\n<h3><a id=\"1_3\"></a>1.概括话题做否定</h3>\n<h3><a id=\"2_5\"></a>2.联系现状做说明</h3>\n<h3><a id=\"3_7\"></a>3.分析原因点问题</h3>\n<h3><a id=\"4_9\"></a>4.解决问题展未来</h3>\n<h2><a id=\"_13\"></a>积极类社会现象题</h2>\n<h3><a id=\"1_15\"></a>1.肯定话题，阐明意义</h3>\n<h3><a id=\"2_17\"></a>2.好的原因是什么</h3>\n<h3><a id=\"3_19\"></a>3.有没有不足之处</h3>\n<h3><a id=\"4__21\"></a>4. 如何好上加好</h3>\n<h3><a id=\"_25\"></a>政策行为题</h3>\n<h4><a id=\"1_27\"></a>1.概括政策的目的和意义</h4>\n<h4><a id=\"2_29\"></a>2.分析政策合理必要性</h4>\n<h4><a id=\"3_31\"></a>3.点出可能存在的问题</h4>\n<h4><a id=\"4_33\"></a>4.提出解决优化的对策</h4>\n', 1474394942186532865);

-- ----------------------------
-- Table structure for ms_article_tag
-- ----------------------------
DROP TABLE IF EXISTS `ms_article_tag`;
CREATE TABLE `ms_article_tag`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `article_id` bigint NOT NULL,
  `tag_id` bigint NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `article_id`(`article_id`) USING BTREE,
  INDEX `tag_id`(`tag_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1474394942199115778 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of ms_article_tag
-- ----------------------------
INSERT INTO `ms_article_tag` VALUES (1, 1, 7);
INSERT INTO `ms_article_tag` VALUES (2, 1, 5);
INSERT INTO `ms_article_tag` VALUES (3, 1, 8);
INSERT INTO `ms_article_tag` VALUES (4, 9, 7);
INSERT INTO `ms_article_tag` VALUES (5, 10, 7);
INSERT INTO `ms_article_tag` VALUES (6, 10, 8);
INSERT INTO `ms_article_tag` VALUES (7, 10, 5);
INSERT INTO `ms_article_tag` VALUES (8, 10, 6);
INSERT INTO `ms_article_tag` VALUES (1405564731321802753, 1405564731300831233, 5);
INSERT INTO `ms_article_tag` VALUES (1405909844761800706, 1405909844724051969, 5);
INSERT INTO `ms_article_tag` VALUES (1405916999787233281, 1405916999732707330, 5);
INSERT INTO `ms_article_tag` VALUES (1468187310410977282, 1468187310301925377, 5);
INSERT INTO `ms_article_tag` VALUES (1468187310419365889, 1468187310301925377, 6);
INSERT INTO `ms_article_tag` VALUES (1468187310419365890, 1468187310301925377, 7);
INSERT INTO `ms_article_tag` VALUES (1468192662422638593, 1468192662137425921, 8);
INSERT INTO `ms_article_tag` VALUES (1468227279368343554, 1468227279309623298, 8);
INSERT INTO `ms_article_tag` VALUES (1468231964535934978, 1468231964523352066, 5);
INSERT INTO `ms_article_tag` VALUES (1468473952854134786, 1468473952799608834, 5);
INSERT INTO `ms_article_tag` VALUES (1468562564580929538, 1468562564480266241, 5);
INSERT INTO `ms_article_tag` VALUES (1468562816952291329, 1468562816797102082, 5);
INSERT INTO `ms_article_tag` VALUES (1469349701656031234, 1469349701563756546, 5);
INSERT INTO `ms_article_tag` VALUES (1469350256197607426, 1469350256096944130, 5);
INSERT INTO `ms_article_tag` VALUES (1469574735632863234, 1469574735540588545, 5);
INSERT INTO `ms_article_tag` VALUES (1469578376599117826, 1469578376494260225, 5);
INSERT INTO `ms_article_tag` VALUES (1469579087856648194, 1469579087743401985, 5);
INSERT INTO `ms_article_tag` VALUES (1471856157007368194, 1471856156936065026, 5);
INSERT INTO `ms_article_tag` VALUES (1472928310633246722, 1472928309869883394, 5);
INSERT INTO `ms_article_tag` VALUES (1472932224204091394, 1472932224111816706, 5);
INSERT INTO `ms_article_tag` VALUES (1472967439580475394, 1472967438955524098, 5);
INSERT INTO `ms_article_tag` VALUES (1472968451326291970, 1472968450655203330, 5);
INSERT INTO `ms_article_tag` VALUES (1472970772517040130, 1472970771699150849, 5);
INSERT INTO `ms_article_tag` VALUES (1474394237916753922, 1474394237451186177, 8);
INSERT INTO `ms_article_tag` VALUES (1474394449007685634, 1474394448995102722, 8);
INSERT INTO `ms_article_tag` VALUES (1474394705074139137, 1474394705053167618, 8);
INSERT INTO `ms_article_tag` VALUES (1474394942199115778, 1474394942186532865, 8);

-- ----------------------------
-- Table structure for ms_category
-- ----------------------------
DROP TABLE IF EXISTS `ms_category`;
CREATE TABLE `ms_category`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `category_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of ms_category
-- ----------------------------
INSERT INTO `ms_category` VALUES (1, '/static/category/front.png', '前端', '前端是什么，大前端');
INSERT INTO `ms_category` VALUES (2, '/static/category/back.png', '后端', '后端最牛叉');
INSERT INTO `ms_category` VALUES (3, '/static/category/lift.jpg', '生活', '生活趣事');
INSERT INTO `ms_category` VALUES (4, '/static/category/database.png', '数据库', '没数据库，啥也不管用');
INSERT INTO `ms_category` VALUES (5, '/static/category/language.png', '编程语言', '好多语言，该学哪个？');

-- ----------------------------
-- Table structure for ms_comment
-- ----------------------------
DROP TABLE IF EXISTS `ms_comment`;
CREATE TABLE `ms_comment`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `create_date` bigint NOT NULL,
  `article_id` bigint NOT NULL,
  `author_id` bigint NOT NULL,
  `parent_id` bigint NOT NULL,
  `to_uid` bigint NOT NULL,
  `level` varchar(1) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `article_id`(`article_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1469580328435302402 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of ms_comment
-- ----------------------------
INSERT INTO `ms_comment` VALUES (53, '写的好', 123213213213, 1, 1, 0, 1, '1');
INSERT INTO `ms_comment` VALUES (54, '111', 123123123123, 1, 1, 53, 1, '2');
INSERT INTO `ms_comment` VALUES (56, '222', 12312, 1, 1, 0, 1, '1');
INSERT INTO `ms_comment` VALUES (333, '我是子子', 213232223, 1, 1, 1405209691876790274, 1, '3');
INSERT INTO `ms_comment` VALUES (1405204547248377858, '123', 1623861846172, 1, 1, 53, 1, '2');
INSERT INTO `ms_comment` VALUES (1405205050975899650, '123123', 1623861966270, 1, 1, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1405205572185280513, '3333', 1623862090534, 1, 1, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1405206087392612353, '7777', 1623862213367, 1, 1, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1405206147568291842, '7777', 1623862227714, 1, 1, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1405206347246522370, '666', 1623862275315, 1, 1, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1405208637198131202, '99999999999999999999', 1623862821278, 1, 1, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1405209691876790274, '66666666666666666', 1623863072732, 1, 1, 1405208637198131202, 1, '2');
INSERT INTO `ms_comment` VALUES (1468087118189838338, '我是神', 1638854196336, 1, 1, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1468087672114790401, '我是神神', 1638854332836, 1, 1, 1468087118189838300, 1, '2');
INSERT INTO `ms_comment` VALUES (1468089117421621250, '我是深深', 1638854696022, 1, 1, 1468087118189838338, 1, '2');
INSERT INTO `ms_comment` VALUES (1468089200917630977, '神神神', 1638854715934, 1, 1, 1468087118189838338, 1, '2');
INSERT INTO `ms_comment` VALUES (1468091693408026625, '我来拉', 1638855310189, 1, 1468091583290769410, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1468092090558312450, '强啊李搏猛', 1638855404876, 1, 1468091583290769410, 1468087118189838338, 1, '2');
INSERT INTO `ms_comment` VALUES (1468108565838884866, '123123', 1638859332891, 1468108070718074881, 1, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1468113565705154561, '2222', 1638860524947, 1468108070718074881, 1, 1468108565838884866, 1, '2');
INSERT INTO `ms_comment` VALUES (1468115444342263810, '111', 1638860972850, 1468108070718074881, 1, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1468115490425081858, '222', 1638860983842, 1468108070718074881, 1, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1468115784391266305, '成功啦哈哈哈', 1638861053929, 1468108070718074881, 1, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1468128057579044866, '太强了', 1638863980079, 1468125665064230913, 1, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1468128903192657921, '真的强', 1638864181691, 1468125665064230913, 1, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1468226516596412417, '我很强', 1638887454541, 1468192662137425921, 1, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1468231328071274498, '强', 1638888601688, 1, 1468228187896532994, 1468091693408026625, 1468091583290769410, '2');
INSERT INTO `ms_comment` VALUES (1468473442570915842, '傻狗u', 1638946326282, 1468187310301925377, 1468473254548656129, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1469557927236403201, 'hahah', 1639204887572, 1468562816797102082, 1, 0, 0, '1');
INSERT INTO `ms_comment` VALUES (1469558307001270274, '可以', 1639204978119, 1, 1, 1468091693408026625, 1468091583290769410, '2');
INSERT INTO `ms_comment` VALUES (1469580328435302402, '什么', 1639210228437, 1469579087743401985, 1, 0, 0, '1');

-- ----------------------------
-- Table structure for ms_permission
-- ----------------------------
DROP TABLE IF EXISTS `ms_permission`;
CREATE TABLE `ms_permission`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of ms_permission
-- ----------------------------
INSERT INTO `ms_permission` VALUES (1, '查询权限列表', '/admin/permission/permissionList', '查询权限列表');
INSERT INTO `ms_permission` VALUES (2, '11', '11', '111');
INSERT INTO `ms_permission` VALUES (7, '1213', '123', '123');
INSERT INTO `ms_permission` VALUES (8, '删除权限', '/admin/permission/add', '删除权限');

-- ----------------------------
-- Table structure for ms_sys_log
-- ----------------------------
DROP TABLE IF EXISTS `ms_sys_log`;
CREATE TABLE `ms_sys_log`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `create_date` bigint NULL DEFAULT NULL,
  `ip` varchar(15) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `method` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `module` varchar(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `nickname` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `operation` varchar(25) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `params` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `time` bigint NULL DEFAULT NULL,
  `userid` bigint NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_unicode_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of ms_sys_log
-- ----------------------------

-- ----------------------------
-- Table structure for ms_sys_user
-- ----------------------------
DROP TABLE IF EXISTS `ms_sys_user`;
CREATE TABLE `ms_sys_user`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `account` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '账号',
  `admin` bit(1) NULL DEFAULT NULL COMMENT '是否管理员',
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '头像',
  `create_date` bigint NULL DEFAULT NULL COMMENT '注册时间',
  `deleted` bit(1) NULL DEFAULT NULL COMMENT '是否删除',
  `email` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '邮箱',
  `last_login` bigint NULL DEFAULT NULL COMMENT '最后登录时间',
  `mobile_phone_number` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '手机号',
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '昵称',
  `password` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '密码',
  `salt` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '加密盐',
  `status` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1468572859206496258 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of ms_sys_user
-- ----------------------------
INSERT INTO `ms_sys_user` VALUES (1, 'admin', b'1', '/static/user/admin.png', 20210622223122, b'0', '11', 20210630223130, '12', '李搏猛', '5bf96431fd87b0b92db4a03058bd1374', '12', '1');
INSERT INTO `ms_sys_user` VALUES (1465606476189523969, '807073364', b'0', '/static/user/user_1.png', 1638262774750, b'0', '', 1638262781178, NULL, 'lbm', '843a4d2b053686bde5f541e6e8983272', NULL, NULL);
INSERT INTO `ms_sys_user` VALUES (1465607885056233474, '8070733645', b'0', '/static/user/user_1.png', 1638263124128, b'0', '', 1638263124129, NULL, 'lbm', '843a4d2b053686bde5f541e6e8983272', NULL, NULL);
INSERT INTO `ms_sys_user` VALUES (1468091583290769410, 'q807073364', b'0', '/static/user/user_1.png', 1638855283931, b'0', '', 1638855283931, NULL, '游客256', '46892ff26b090cd75fd3c3e1239604c9', NULL, NULL);
INSERT INTO `ms_sys_user` VALUES (1468228187896532994, '1047480643', b'0', '/static/user/user_1.png', 1638887853012, b'0', '', 1638887853012, NULL, '毕达哥拉斯', '693d0bfdaecee9acaf60d203f5151483', NULL, NULL);
INSERT INTO `ms_sys_user` VALUES (1468473254548656129, '李明傻狗', b'0', '/static/user/user_1.png', 1638946281455, b'0', '', 1638946281455, NULL, '傻狗', '843a4d2b053686bde5f541e6e8983272', NULL, NULL);
INSERT INTO `ms_sys_user` VALUES (1468563894150152193, 'test', b'0', '/static/user/user_1.png', 1638967891617, b'0', '', 1638967891617, NULL, 'lbm', '693d0bfdaecee9acaf60d203f5151483', NULL, NULL);
INSERT INTO `ms_sys_user` VALUES (1468564778846269441, 'test02', b'0', '/static/user/user_1.png', 1638968102545, b'0', '', 1638968102545, NULL, 'lbm', '693d0bfdaecee9acaf60d203f5151483', NULL, NULL);
INSERT INTO `ms_sys_user` VALUES (1468569589096411138, 'test03', b'0', '/static/user/user_1.png', 1638969249392, b'0', '', 1638969249392, NULL, 'lbm', '96e3e8ef438b11325acc4f6402b2a79f', NULL, NULL);
INSERT INTO `ms_sys_user` VALUES (1468572193453010945, 'test04', b'0', '/static/user/user_1.png', 1638969870324, b'0', '', 1638969870324, NULL, 'lbm', '96e3e8ef438b11325acc4f6402b2a79f', NULL, NULL);
INSERT INTO `ms_sys_user` VALUES (1468572859206496258, '80707', b'0', '/static/user/user_1.png', 1638970029056, b'0', '', 1638970029056, NULL, 'lbm', '96e3e8ef438b11325acc4f6402b2a79f', NULL, NULL);

-- ----------------------------
-- Table structure for ms_tag
-- ----------------------------
DROP TABLE IF EXISTS `ms_tag`;
CREATE TABLE `ms_tag`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  `tag_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of ms_tag
-- ----------------------------
INSERT INTO `ms_tag` VALUES (5, '/static/tag/java.png', 'springboot');
INSERT INTO `ms_tag` VALUES (6, '/static/tag/java.png', 'spring');
INSERT INTO `ms_tag` VALUES (7, '/static/tag/java.png', 'springmvc');
INSERT INTO `ms_tag` VALUES (8, '/static/tag/css.png', '刀剑录');

-- ----------------------------
-- Table structure for site_setting
-- ----------------------------
DROP TABLE IF EXISTS `site_setting`;
CREATE TABLE `site_setting`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `name_en` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `name_zh` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,
  `type` int NULL DEFAULT NULL COMMENT '1基础设置，2页脚徽标，3资料卡，4友链信息',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 28 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of site_setting
-- ----------------------------
INSERT INTO `site_setting` VALUES (1, 'webTitleSuffix', '网页标题后缀', ' - Naccl\'s Blog', 1);
INSERT INTO `site_setting` VALUES (2, 'blogName', '博客名称', 'Naccl\'s Blog', 1);
INSERT INTO `site_setting` VALUES (3, 'footerImgTitle', '页脚图片标题', '手机看本站', 1);
INSERT INTO `site_setting` VALUES (4, 'footerImgUrl', '页脚图片路径', '/img/qr.png', 1);
INSERT INTO `site_setting` VALUES (5, 'copyright', 'Copyright', '{\"title\":\"Copyright © 2019 - 2020\",\"siteName\":\"NACCL\'S BLOG\"}', 1);
INSERT INTO `site_setting` VALUES (6, 'beian', 'ICP备案号', '', 1);
INSERT INTO `site_setting` VALUES (7, 'badge', '徽标', '{\"title\":\"由 Spring Boot 强力驱动\",\"url\":\"https://spring.io/projects/spring-boot/\",\"subject\":\"Powered\",\"value\":\"Spring Boot\",\"color\":\"blue\"}', 2);
INSERT INTO `site_setting` VALUES (8, 'badge', '徽标', '{\"title\":\"Vue.js 客户端渲染\",\"url\":\"https://cn.vuejs.org/\",\"subject\":\"SPA\",\"value\":\"Vue.js\",\"color\":\"brightgreen\"}', 2);
INSERT INTO `site_setting` VALUES (9, 'badge', '徽标', '{\"title\":\"UI 框架 Semantic-UI\",\"url\":\"https://semantic-ui.com/\",\"subject\":\"UI\",\"value\":\"Semantic-UI\",\"color\":\"semantic-ui\"}', 2);
INSERT INTO `site_setting` VALUES (10, 'badge', '徽标', '{\"title\":\"阿里云提供服务器及域名相关服务\",\"url\":\"https://www.aliyun.com/\",\"subject\":\"VPS & DNS\",\"value\":\"Aliyun\",\"color\":\"blueviolet\"}', 2);
INSERT INTO `site_setting` VALUES (11, 'badge', '徽标', '{\"title\":\"jsDelivr 提供 CDN 加速服务\",\"url\":\"https://www.jsdelivr.com/\",\"subject\":\"CDN\",\"value\":\"jsDelivr\",\"color\":\"orange\"}', 2);
INSERT INTO `site_setting` VALUES (12, 'badge', '徽标', '{\"title\":\"GitHub 提供图床\",\"url\":\"https://github.com/\",\"subject\":\"OSS\",\"value\":\"GitHub\",\"color\":\"github\"}', 2);
INSERT INTO `site_setting` VALUES (13, 'badge', '徽标', '{\"title\":\"本站点采用 CC BY 4.0 国际许可协议进行许可\",\"url\":\"https://creativecommons.org/licenses/by/4.0/\",\"subject\":\"CC\",\"value\":\"BY 4.0\",\"color\":\"lightgray\"}', 2);
INSERT INTO `site_setting` VALUES (14, 'avatar', '图片路径', '/img/avatar.jpg', 3);
INSERT INTO `site_setting` VALUES (15, 'name', '昵称', 'Naccl', 3);
INSERT INTO `site_setting` VALUES (16, 'rollText', '滚动个签', '\"云鹤当归天，天不迎我妙木仙；\",\"游龙当归海，海不迎我自来也。\"', 3);
INSERT INTO `site_setting` VALUES (17, 'github', 'GitHub地址', 'https://github.com/Naccl', 3);
INSERT INTO `site_setting` VALUES (18, 'qq', 'QQ链接', 'http://sighttp.qq.com/authd?IDKEY=', 3);
INSERT INTO `site_setting` VALUES (19, 'bilibili', 'bilibili链接', 'https://space.bilibili.com/', 3);
INSERT INTO `site_setting` VALUES (20, 'netease', '网易云音乐', 'https://music.163.com/#/user/home?id=', 3);
INSERT INTO `site_setting` VALUES (21, 'email', 'email', 'mailto:i@naccl.top', 3);
INSERT INTO `site_setting` VALUES (22, 'favorite', '自定义', '{\"title\":\"最喜欢的动漫 📺\",\"content\":\"异度侵入、春物语、NO GAME NO LIFE、实力至上主义的教室、辉夜大小姐、青春猪头少年不会梦到兔女郎学姐、路人女主、Re0、魔禁、超炮、俺妹、在下坂本、散华礼弥、OVERLORD、慎勇、人渣的本愿、白色相簿2、死亡笔记、DARLING in the FRANXX、鬼灭之刃\"}', 3);
INSERT INTO `site_setting` VALUES (23, 'favorite', '自定义', '{\"title\":\"最喜欢我的女孩子们 🤤\",\"content\":\"芙兰达、土间埋、食蜂操祈、佐天泪爷、樱岛麻衣、桐崎千棘、02、亚丝娜、高坂桐乃、五更琉璃、安乐冈花火、一色彩羽、英梨梨、珈百璃、时崎狂三、可儿那由多、和泉纱雾、早坂爱\"}', 3);
INSERT INTO `site_setting` VALUES (24, 'favorite', '自定义', '{\"title\":\"最喜欢玩的游戏 🎮\",\"content\":\"Stellaris、巫师、GTA、荒野大镖客、刺客信条、魔兽争霸、LOL、PUBG\"}', 3);
INSERT INTO `site_setting` VALUES (25, 'reward', '赞赏码路径', '/img/reward.jpg', 1);
INSERT INTO `site_setting` VALUES (26, 'commentAdminFlag', '博主评论标识', '咕咕', 1);
INSERT INTO `site_setting` VALUES (27, 'friendContent', '友链页面信息', '随机排序，不分先后。欢迎交换友链~(￣▽￣)~*\n\n* 昵称：Naccl\n* 一句话：游龙当归海，海不迎我自来也。\n* 网址：[https://naccl.top](https://naccl.top)\n* 头像URL：[https://naccl.top/img/avatar.jpg](https://naccl.top/img/avatar.jpg)\n\n仅凭个人喜好添加友链，请在收到我的回复邮件后再于贵站添加本站链接。原则上已添加的友链不会删除，如果你发现自己被移除了，恕不另行通知，只需和我一样做就好。\n\n', 4);
INSERT INTO `site_setting` VALUES (28, 'friendCommentEnabled', '友链页面评论开关', '1', 4);

-- ----------------------------
-- Table structure for tag
-- ----------------------------
DROP TABLE IF EXISTS `tag`;
CREATE TABLE `tag`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `tag_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `color` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标签颜色(可选)',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of tag
-- ----------------------------

-- ----------------------------
-- Table structure for visit_record
-- ----------------------------
DROP TABLE IF EXISTS `visit_record`;
CREATE TABLE `visit_record`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `pv` int NOT NULL COMMENT '访问量',
  `uv` int NOT NULL COMMENT '独立用户',
  `date` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '日期\"02-23\"',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of visit_record
-- ----------------------------

SET FOREIGN_KEY_CHECKS = 1;
